(function(){function s(d,e,n){function t(l,i){if(!e[l]){if(!d[l]){var r="function"==typeof require&&require;if(!i&&r)return r(l,!0);if(o)return o(l,!0);var c=new Error("Cannot find module '"+l+"'");throw c.code="MODULE_NOT_FOUND",c}var a=e[l]={exports:{}};d[l][0].call(a.exports,function(e){var i=d[l][1][e];return t(i||e)},a,a.exports,s,d,e,n)}return e[l].exports}for(var o="function"==typeof require&&require,a=0;a<n.length;a++)t(n[a]);return t}return s})()({1:[function(e){'use strict';function t(){var e=s(".fading");if("IntersectionObserver"in window)for(var t=new IntersectionObserver(function(e){e.forEach(function(e){if(e.isIntersecting){var t=s(e.target);t.addClass("fade")}})}),o=0;o<e.length;o++)t.observe(e[o]);else e.addClass("fade")}function i(){var e=s("img.lazy-img");if("IntersectionObserver"in window)for(var t=new IntersectionObserver(function(e){e.forEach(function(e){if(e.isIntersecting){var t=s(e.target),i=t.attr("data-lazy");t.attr("src",i)}})}),o=0;o<e.length;o++)t.observe(e[o]);else for(var n=0;n<e.length;n++){var a=s(e[n]),r=a.attr("data-lazy");a.attr("src",r)}}function o(e,t,i){var o=this;this.toggle=s("."+e),this.menu=s("."+t),this.icon=s("."+i),this.toggle.click(function(){o.icon.hasClass("active")?(o.icon.removeClass("active"),o.menu.slideUp()):(o.icon.addClass("active"),o.menu.slideDown())})}function n(){e("slick-carousel");s(".slider").css("display","block");var t=s(".slides-list"),i=s(".slider .traffic-light"),o=s(".slider .traffic-light .signal"),n=s(".slider .control-button");t.slick({infinite:!0,slidesToShow:1,slidesToScroll:1,fade:!0,dots:!1,arrows:!0,autoplay:!0,speed:1e3,pauseOnHover:!1,pauseOnFocus:!1,autoplaySpeed:5e3,adaptiveHeight:!0,mobileFirst:!0}),n.on("click",function(){t.hasClass("launched")?a():t.hasClass("stopped")?r():r(),i.addClass("visible"),n.attr("disabled",!0),n.addClass("disabled"),setTimeout(function(){i.removeClass("visible"),n.removeAttr("disabled"),n.removeClass("disabled")},1500)});var a=function(){t.slick("slickSetOption",{autoplay:!1},!0),t.removeClass("launched"),t.addClass("stopped"),o.removeClass("go"),o.addClass("stop"),n.html("Go")},r=function(){t.slick("slickSetOption",{autoplay:!0},!0),t.removeClass("stopped"),t.addClass("launched"),o.removeClass("stop"),o.addClass("go"),n.html("Stop")}}var s=e("jquery");s(document).on("DOMContentLoaded",function(){n(),t(),i()});var a=new o("navbar-toggle","menu","navbar-toggle-icon"),r=new o("dropdown-toggle","dropdown-menu","dropdown-toggle-icon")},{jquery:2,"slick-carousel":3}],2:[function(e,t){var i=Math.PI,o=Math.round,n=Math.ceil,s=Math.max;/*!
 * jQuery JavaScript Library v3.4.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2019-05-01T21:04Z
 */(function(e,i){"use strict";"object"==typeof t&&"object"==typeof t.exports?t.exports=e.document?i(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return i(e)}:i(e)})("undefined"==typeof window?this:window,function(e,t){"use strict";function a(e,t,o){o=o||ue;var n=o.createElement("script"),s,a;if(n.text=e,t)for(s in $e)a=t[s]||t.getAttribute&&t.getAttribute(s),a&&n.setAttribute(s,a);o.head.appendChild(n).parentNode.removeChild(n)}function r(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?xe[ve.call(e)]||"object":typeof e}function d(e){var t=!!e&&"length"in e&&e.length,i=r(e);return!(Se(e)||Ce(e))&&("array"===i||0===t||"number"==typeof t&&0<t&&t-1 in e)}function l(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}function p(e,t,o){return Se(t)?je.grep(e,function(e,n){return!!t.call(e,n,e)!==o}):t.nodeType?je.grep(e,function(e){return e===t!==o}):"string"==typeof t?je.filter(t,e,o):je.grep(e,function(e){return-1<ye.call(t,e)!==o})}function c(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function u(e){var t={};return je.each(e.match(Me)||[],function(e,i){t[i]=!0}),t}function h(e){return e}function f(e){throw e}function g(e,t,i,o){var n;try{e&&Se(n=e.promise)?n.call(e).done(t).fail(i):e&&Se(n=e.then)?n.call(e,t,i):t.apply(void 0,[e].slice(o))}catch(e){i.apply(void 0,[e])}}function m(){ue.removeEventListener("DOMContentLoaded",m),e.removeEventListener("load",m),je.ready()}function y(e,t){return t.toUpperCase()}function x(e){return e.replace(Ue,"ms-").replace(Xe,y)}function v(){this.expando=je.expando+v.uid++}function b(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:Ge.test(e)?JSON.parse(e):e)}function w(e,t,i){var o;if(void 0===i&&1===e.nodeType)if(o="data-"+t.replace(Qe,"-$&").toLowerCase(),i=e.getAttribute(o),"string"==typeof i){try{i=b(i)}catch(t){}Ve.set(e,t,i)}else i=void 0;return i}function k(e,t,i,o){var n=20,s=o?function(){return o.cur()}:function(){return je.css(e,t,"")},a=s(),r=i&&i[3]||(je.cssNumber[t]?"":"px"),d=e.nodeType&&(je.cssNumber[t]||"px"!==r&&+a)&&Je.exec(je.css(e,t)),l,p;if(d&&d[3]!==r){for(a/=2,r=r||d[3],d=+a||1;n--;)je.style(e,t,d+r),0>=(1-p)*(1-(p=s()/a||.5))&&(n=0),d/=p;d*=2,je.style(e,t,d+r),i=i||[]}return i&&(d=+d||+a||0,l=i[1]?d+(i[1]+1)*i[2]:+i[2],o&&(o.unit=r,o.start=d,o.end=l)),l}function T(e){var t=e.ownerDocument,i=e.nodeName,o=st[i],n;return o?o:(n=t.body.appendChild(t.createElement(i)),o=je.css(n,"display"),n.parentNode.removeChild(n),"none"===o&&(o="block"),st[i]=o,o)}function S(e,t){for(var i=[],o=0,n=e.length,s,a;o<n;o++)(a=e[o],!!a.style)&&(s=a.style.display,t?("none"===s&&(i[o]=Ye.get(a,"display")||null,!i[o]&&(a.style.display="")),""===a.style.display&&ot(a)&&(i[o]=T(a))):"none"!==s&&(i[o]="none",Ye.set(a,"display",s)));for(o=0;o<n;o++)null!=i[o]&&(e[o].style.display=i[o]);return e}function C(e,t){var i;return i="undefined"==typeof e.getElementsByTagName?"undefined"==typeof e.querySelectorAll?[]:e.querySelectorAll(t||"*"):e.getElementsByTagName(t||"*"),void 0===t||t&&l(e,t)?je.merge([e],i):i}function $(e,t){for(var o=0,n=e.length;o<n;o++)Ye.set(e[o],"globalEval",!t||Ye.get(t[o],"globalEval"))}function A(e,t,o,n,s){for(var a=t.createDocumentFragment(),d=[],p=0,c=e.length,l,u,h,f,g,m;p<c;p++)if(l=e[p],l||0===l)if("object"===r(l))je.merge(d,l.nodeType?[l]:l);else if(!pt.test(l))d.push(t.createTextNode(l));else{for(u=u||a.appendChild(t.createElement("div")),h=(rt.exec(l)||["",""])[1].toLowerCase(),f=lt[h]||lt._default,u.innerHTML=f[1]+je.htmlPrefilter(l)+f[2],m=f[0];m--;)u=u.lastChild;je.merge(d,u.childNodes),u=a.firstChild,u.textContent=""}for(a.textContent="",p=0;l=d[p++];){if(n&&-1<je.inArray(l,n)){s&&s.push(l);continue}if(g=tt(l),u=C(a.appendChild(l),"script"),g&&$(u),o)for(m=0;l=u[m++];)dt.test(l.type||"")&&o.push(l)}return a}function j(){return!0}function E(){return!1}function D(e,t){return e===N()==("focus"===t)}function N(){try{return ue.activeElement}catch(e){}}function L(e,t,i,o,n,s){var a,r;if("object"==typeof t){for(r in"string"!=typeof i&&(o=o||i,i=void 0),t)L(e,r,i,o,t[r],s);return e}if(null==o&&null==n?(n=i,o=i=void 0):null==n&&("string"==typeof i?(n=o,o=void 0):(n=o,o=i,i=void 0)),!1===n)n=E;else if(!n)return e;return 1===s&&(a=n,n=function(e){return je().off(e),a.apply(this,arguments)},n.guid=a.guid||(a.guid=je.guid++)),e.each(function(){je.event.add(this,t,n,o,i)})}function H(e,t,i){return i?void(Ye.set(e,t,!1),je.event.add(e,t,{namespace:!1,handler:function(e){var o=Ye.get(this,t),n,s;if(!(1&e.isTrigger&&this[t]))o.length&&(Ye.set(this,t,{value:je.event.trigger(je.extend(o[0],je.Event.prototype),o.slice(1),this)}),e.stopImmediatePropagation());else if(!!o.length)(je.event.special[t]||{}).delegateType&&e.stopPropagation();else if(o=fe.call(arguments),Ye.set(this,t,o),n=i(this,t),this[t](),s=Ye.get(this,t),o!==s||n?Ye.set(this,t,!1):s={},o!==s)return e.stopImmediatePropagation(),e.preventDefault(),s.value}})):void(void 0===Ye.get(e,t)&&je.event.add(e,t,j))}function O(e,t){return l(e,"table")&&l(11===t.nodeType?t.firstChild:t,"tr")?je(e).children("tbody")[0]||e:e}function P(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function q(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function I(e,t){var o,n,s,a,r,d,p,c;if(1===t.nodeType){if(Ye.hasData(e)&&(a=Ye.access(e),r=Ye.set(t,a),c=a.events,c))for(s in delete r.handle,r.events={},c)for(o=0,n=c[s].length;o<n;o++)je.event.add(t,s,c[s][o]);Ve.hasData(e)&&(d=Ve.access(e),p=je.extend({},d),Ve.set(t,p))}}function z(e,t){var i=t.nodeName.toLowerCase();"input"===i&&at.test(e.type)?t.checked=e.checked:("input"===i||"textarea"===i)&&(t.defaultValue=e.defaultValue)}function W(e,t,o,n){t=ge.apply([],t);var s=0,r=e.length,d=t[0],l=Se(d),p,c,u,h,f,g;if(l||1<r&&"string"==typeof d&&!Te.checkClone&&mt.test(d))return e.each(function(i){var s=e.eq(i);l&&(t[0]=d.call(this,i,s.html())),W(s,t,o,n)});if(r&&(p=A(t,e[0].ownerDocument,!1,e,n),c=p.firstChild,1===p.childNodes.length&&(p=c),c||n)){for(u=je.map(C(p,"script"),P),h=u.length;s<r;s++)f=p,s!==r-1&&(f=je.clone(f,!0,!0),h&&je.merge(u,C(f,"script"))),o.call(e[s],f,s);if(h)for(g=u[u.length-1].ownerDocument,je.map(u,q),s=0;s<h;s++)f=u[s],dt.test(f.type||"")&&!Ye.access(f,"globalEval")&&je.contains(g,f)&&(f.src&&"module"!==(f.type||"").toLowerCase()?je._evalUrl&&!f.noModule&&je._evalUrl(f.src,{nonce:f.nonce||f.getAttribute("nonce")}):a(f.textContent.replace(yt,""),f,g))}return e}function M(e,t,o){for(var n=t?je.filter(t,e):e,s=0,a;null!=(a=n[s]);s++)o||1!==a.nodeType||je.cleanData(C(a)),a.parentNode&&(o&&tt(a)&&$(C(a,"script")),a.parentNode.removeChild(a));return e}function R(e,t,i){var o=e.style,n,s,a,r;return i=i||vt(e),i&&(r=i.getPropertyValue(t)||i[t],""===r&&!tt(e)&&(r=je.style(e,t)),!Te.pixelBoxStyles()&&xt.test(r)&&bt.test(t)&&(n=o.width,s=o.minWidth,a=o.maxWidth,o.minWidth=o.maxWidth=o.width=r,r=i.width,o.width=n,o.minWidth=s,o.maxWidth=a)),void 0===r?r:r+""}function B(e,t){return{get:function(){return e()?void delete this.get:(this.get=t).apply(this,arguments)}}}function F(e){for(var t=e[0].toUpperCase()+e.slice(1),o=wt.length;o--;)if(e=wt[o]+t,e in kt)return e}function U(e){var t=je.cssProps[e]||Tt[e];return t?t:e in kt?e:Tt[e]=F(e)||e}function X(e,t,i){var o=Je.exec(t);return o?s(0,o[2]-(i||0))+(o[3]||"px"):t}function _(e,t,o,a,r,d){var l="width"===t?1:0,p=0,c=0;if(o===(a?"border":"content"))return 0;for(;4>l;l+=2)"margin"===o&&(c+=je.css(e,o+Ze[l],!0,r)),a?("content"===o&&(c-=je.css(e,"padding"+Ze[l],!0,r)),"margin"!==o&&(c-=je.css(e,"border"+Ze[l]+"Width",!0,r))):(c+=je.css(e,"padding"+Ze[l],!0,r),"padding"===o?p+=je.css(e,"border"+Ze[l]+"Width",!0,r):c+=je.css(e,"border"+Ze[l]+"Width",!0,r));return!a&&0<=d&&(c+=s(0,n(e["offset"+t[0].toUpperCase()+t.slice(1)]-d-c-p-.5))||0),c}function Y(e,t,i){var o=vt(e),n=!Te.boxSizingReliable()||i,s=n&&"border-box"===je.css(e,"boxSizing",!1,o),a=s,r=R(e,t,o),d="offset"+t[0].toUpperCase()+t.slice(1);if(xt.test(r)){if(!i)return r;r="auto"}return(!Te.boxSizingReliable()&&s||"auto"===r||!parseFloat(r)&&"inline"===je.css(e,"display",!1,o))&&e.getClientRects().length&&(s="border-box"===je.css(e,"boxSizing",!1,o),a=d in e,a&&(r=e[d])),r=parseFloat(r)||0,r+_(e,t,i||(s?"border":"content"),a,o,r)+"px"}function V(e,t,i,o,n){return new V.prototype.init(e,t,i,o,n)}function G(){Nt&&(!1===ue.hidden&&e.requestAnimationFrame?e.requestAnimationFrame(G):e.setTimeout(G,je.fx.interval),je.fx.tick())}function Q(){return e.setTimeout(function(){Dt=void 0}),Dt=Date.now()}function K(e,t){var o=0,n={height:e},s;for(t=t?1:0;4>o;o+=2-t)s=Ze[o],n["margin"+s]=n["padding"+s]=e;return t&&(n.opacity=n.width=e),n}function J(e,t,i){for(var o=(te.tweeners[t]||[]).concat(te.tweeners["*"]),n=0,s=o.length,a;n<s;n++)if(a=o[n].call(i,t,e))return a}function Z(e,t,i){var o="width"in t||"height"in t,n=this,s={},a=e.style,r=e.nodeType&&ot(e),d=Ye.get(e,"fxshow"),l,p,c,u,h,f,g,m;for(l in i.queue||(u=je._queueHooks(e,"fx"),null==u.unqueued&&(u.unqueued=0,h=u.empty.fire,u.empty.fire=function(){u.unqueued||h()}),u.unqueued++,n.always(function(){n.always(function(){u.unqueued--,je.queue(e,"fx").length||u.empty.fire()})})),t)if(p=t[l],jt.test(p)){if(delete t[l],c=c||"toggle"===p,p===(r?"hide":"show"))if("show"===p&&d&&void 0!==d[l])r=!0;else continue;s[l]=d&&d[l]||je.style(e,l)}if(f=!je.isEmptyObject(t),f||!je.isEmptyObject(s))for(l in o&&1===e.nodeType&&(i.overflow=[a.overflow,a.overflowX,a.overflowY],g=d&&d.display,null==g&&(g=Ye.get(e,"display")),m=je.css(e,"display"),"none"===m&&(g?m=g:(S([e],!0),g=e.style.display||g,m=je.css(e,"display"),S([e]))),("inline"===m||"inline-block"===m&&null!=g)&&"none"===je.css(e,"float")&&(!f&&(n.done(function(){a.display=g}),null==g&&(m=a.display,g="none"===m?"":m)),a.display="inline-block")),i.overflow&&(a.overflow="hidden",n.always(function(){a.overflow=i.overflow[0],a.overflowX=i.overflow[1],a.overflowY=i.overflow[2]})),f=!1,s)f||(d?"hidden"in d&&(r=d.hidden):d=Ye.access(e,"fxshow",{display:g}),c&&(d.hidden=!r),r&&S([e],!0),n.done(function(){for(l in r||S([e]),Ye.remove(e,"fxshow"),s)je.style(e,l,s[l])})),f=J(r?d[l]:0,l,n),l in d||(d[l]=f.start,r&&(f.end=f.start,f.start=0))}function ee(e,t){var i,o,n,s,a;for(i in e)if(o=x(i),n=t[o],s=e[i],Array.isArray(s)&&(n=s[1],s=e[i]=s[0]),i!==o&&(e[o]=s,delete e[i]),a=je.cssHooks[o],a&&"expand"in a)for(i in s=a.expand(s),delete e[o],s)i in e||(e[i]=s[i],t[i]=n);else t[o]=n}function te(e,t,i){var o=0,n=te.prefilters.length,a=je.Deferred().always(function(){delete r.elem}),r=function(){if(c)return!1;for(var t=Dt||Q(),i=s(0,d.startTime+d.duration-t),o=i/d.duration||0,n=1-o,r=0,l=d.tweens.length;r<l;r++)d.tweens[r].run(n);return(a.notifyWith(e,[d,n,i]),1>n&&l)?i:(l||a.notifyWith(e,[d,1,0]),a.resolveWith(e,[d]),!1)},d=a.promise({elem:e,props:je.extend({},t),opts:je.extend(!0,{specialEasing:{},easing:je.easing._default},i),originalProperties:t,originalOptions:i,startTime:Dt||Q(),duration:i.duration,tweens:[],createTween:function(t,i){var o=je.Tween(e,d.opts,t,i,d.opts.specialEasing[t]||d.opts.easing);return d.tweens.push(o),o},stop:function(t){var i=0,o=t?d.tweens.length:0;if(c)return this;for(c=!0;i<o;i++)d.tweens[i].run(1);return t?(a.notifyWith(e,[d,1,0]),a.resolveWith(e,[d,t])):a.rejectWith(e,[d,t]),this}}),l=d.props,p,c;for(ee(l,d.opts.specialEasing);o<n;o++)if(p=te.prefilters[o].call(d,e,l,d.opts),p)return Se(p.stop)&&(je._queueHooks(d.elem,d.opts.queue).stop=p.stop.bind(p)),p;return je.map(l,J,d),Se(d.opts.start)&&d.opts.start.call(e,d),d.progress(d.opts.progress).done(d.opts.done,d.opts.complete).fail(d.opts.fail).always(d.opts.always),je.fx.timer(je.extend(r,{elem:e,anim:d,queue:d.opts.queue})),d}function ie(e){var t=e.match(Me)||[];return t.join(" ")}function oe(e){return e.getAttribute&&e.getAttribute("class")||""}function ne(e){return Array.isArray(e)?e:"string"==typeof e?e.match(Me)||[]:[]}function se(e,t,o,n){if(Array.isArray(t))je.each(t,function(t,i){o||Bt.test(e)?n(e,i):se(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,o,n)});else if(!o&&"object"===r(t))for(var s in t)se(e+"["+s+"]",t[s],o,n);else n(e,t)}function ae(e){return function(t,o){"string"!=typeof t&&(o=t,t="*");var n=0,s=t.toLowerCase().match(Me)||[],a;if(Se(o))for(;a=s[n++];)"+"===a[0]?(a=a.slice(1)||"*",(e[a]=e[a]||[]).unshift(o)):(e[a]=e[a]||[]).push(o)}}function re(e,t,i,o){function n(r){var d;return s[r]=!0,je.each(e[r]||[],function(e,r){var l=r(t,i,o);return"string"!=typeof l||a||s[l]?a?!(d=l):void 0:(t.dataTypes.unshift(l),n(l),!1)}),d}var s={},a=e===ei;return n(t.dataTypes[0])||!s["*"]&&n("*")}function de(e,t){var i=je.ajaxSettings.flatOptions||{},o,n;for(o in t)void 0!==t[o]&&((i[o]?e:n||(n={}))[o]=t[o]);return n&&je.extend(!0,e,n),e}function le(e,t,i){for(var o=e.contents,n=e.dataTypes,s,a,r,d;"*"===n[0];)n.shift(),void 0===s&&(s=e.mimeType||t.getResponseHeader("Content-Type"));if(s)for(a in o)if(o[a]&&o[a].test(s)){n.unshift(a);break}if(n[0]in i)r=n[0];else{for(a in i){if(!n[0]||e.converters[a+" "+n[0]]){r=a;break}d||(d=a)}r=r||d}return r?(r!==n[0]&&n.unshift(r),i[r]):void 0}function pe(e,t,i,o){var n={},s=e.dataTypes.slice(),a,r,d,l,p;if(s[1])for(d in e.converters)n[d.toLowerCase()]=e.converters[d];for(r=s.shift();r;)if(e.responseFields[r]&&(i[e.responseFields[r]]=t),!p&&o&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),p=r,r=s.shift(),r)if("*"===r)r=p;else if("*"!==p&&p!==r){if(d=n[p+" "+r]||n["* "+r],!d)for(a in n)if(l=a.split(" "),l[1]===r&&(d=n[p+" "+l[0]]||n["* "+l[0]],d)){!0===d?d=n[a]:!0!==n[a]&&(r=l[0],s.unshift(l[1]));break}if(!0!==d)if(d&&e.throws)t=d(t);else try{t=d(t)}catch(t){return{state:"parsererror",error:d?t:"No conversion from "+p+" to "+r}}}return{state:"success",data:t}}var ce=[],ue=e.document,he=Object.getPrototypeOf,fe=ce.slice,ge=ce.concat,me=ce.push,ye=ce.indexOf,xe={},ve=xe.toString,be=xe.hasOwnProperty,we=be.toString,ke=we.call(Object),Te={},Se=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},Ce=function(e){return null!=e&&e===e.window},$e={type:!0,src:!0,nonce:!0,noModule:!0},Ae="3.4.1",je=function(e,t){return new je.fn.init(e,t)},Ee=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;je.fn=je.prototype={jquery:Ae,constructor:je,length:0,toArray:function(){return fe.call(this)},get:function(e){return null==e?fe.call(this):0>e?this[e+this.length]:this[e]},pushStack:function(e){var t=je.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return je.each(this,e)},map:function(e){return this.pushStack(je.map(this,function(t,o){return e.call(t,o,t)}))},slice:function(){return this.pushStack(fe.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,i=+e+(0>e?t:0);return this.pushStack(0<=i&&i<t?[this[i]]:[])},end:function(){return this.prevObject||this.constructor()},push:me,sort:ce.sort,splice:ce.splice},je.extend=je.fn.extend=function(){var e=arguments[0]||{},t=1,o=arguments.length,n=!1,s,a,r,d,l,p;for("boolean"==typeof e&&(n=e,e=arguments[t]||{},t++),"object"==typeof e||Se(e)||(e={}),t===o&&(e=this,t--);t<o;t++)if(null!=(s=arguments[t]))for(a in s)(d=s[a],"__proto__"!==a&&e!==d)&&(n&&d&&(je.isPlainObject(d)||(l=Array.isArray(d)))?(r=e[a],p=l&&!Array.isArray(r)?[]:l||je.isPlainObject(r)?r:{},l=!1,e[a]=je.extend(n,p,d)):void 0!==d&&(e[a]=d));return e},je.extend({expando:"jQuery"+(Ae+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,i;return!!(e&&"[object Object]"===ve.call(e))&&((t=he(e),!!!t)||(i=be.call(t,"constructor")&&t.constructor,"function"==typeof i&&we.call(i)===ke))},isEmptyObject:function(e){for(var t in e)return!1;return!0},globalEval:function(e,t){a(e,{nonce:t&&t.nonce})},each:function(e,t){var o=0,n;if(d(e))for(n=e.length;o<n&&!1!==t.call(e[o],o,e[o]);o++);else for(o in e)if(!1===t.call(e[o],o,e[o]))break;return e},trim:function(e){return null==e?"":(e+"").replace(Ee,"")},makeArray:function(e,t){var i=t||[];return null!=e&&(d(Object(e))?je.merge(i,"string"==typeof e?[e]:e):me.call(i,e)),i},inArray:function(e,t,o){return null==t?-1:ye.call(t,e,o)},merge:function(e,t){for(var o=+t.length,n=0,s=e.length;n<o;n++)e[s++]=t[n];return e.length=s,e},grep:function(e,t,o){for(var n=[],s=0,a=e.length,r;s<a;s++)r=!t(e[s],s),r!==!o&&n.push(e[s]);return n},map:function(e,t,o){var n=0,s=[],a,r;if(d(e))for(a=e.length;n<a;n++)r=t(e[n],n,o),null!=r&&s.push(r);else for(n in e)r=t(e[n],n,o),null!=r&&s.push(r);return ge.apply([],s)},guid:1,support:Te}),"function"==typeof Symbol&&(je.fn[Symbol.iterator]=ce[Symbol.iterator]),je.each(["Boolean","Number","String","Function","Array","Date","RegExp","Object","Error","Symbol"],function(e,t){xe["[object "+t+"]"]=t.toLowerCase()});var De=/*!
 * Sizzle CSS Selector Engine v2.3.4
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2019-04-08
 */function(e){function t(e,t,o,n){var s=t&&t.ownerDocument,a=t?t.nodeType:9,r,d,l,p,c,h,g;if(o=o||[],"string"!=typeof e||!e||1!==a&&9!==a&&11!==a)return o;if(!n&&((t?t.ownerDocument||t:T)!==me&&ge(t),t=t||me,xe)){if(11!==a&&(c=Q.exec(e)))if(!(r=c[1])){if(c[2])return P.apply(o,t.getElementsByTagName(e)),o;if((r=c[3])&&se.getElementsByClassName&&t.getElementsByClassName)return P.apply(o,t.getElementsByClassName(r)),o}else if(9===a){if(!(l=t.getElementById(r)))return o;if(l.id===r)return o.push(l),o}else if(s&&(l=s.getElementById(r))&&ke(t,l)&&l.id===r)return o.push(l),o;if(se.qsa&&!E[e+" "]&&(!ve||!ve.test(e))&&(1!==a||"object"!==t.nodeName.toLowerCase())){if(g=e,s=t,1===a&&B.test(e)){for((p=t.getAttribute("id"))?p=p.replace(ee,te):t.setAttribute("id",p=k),h=le(e),d=h.length;d--;)h[d]="#"+p+" "+f(h[d]);g=h.join(","),s=K.test(e)&&u(t.parentNode)||t}try{return P.apply(o,s.querySelectorAll(g)),o}catch(t){E(e,!0)}finally{p===k&&t.removeAttribute("id")}}}return ce(e.replace(W,"$1"),t,o,n)}function o(){function e(i,o){return t.push(i+" ")>ae.cacheLength&&delete e[t.shift()],e[i+" "]=o}var t=[];return e}function n(e){return e[k]=!0,e}function s(e){var t=me.createElement("fieldset");try{return!!e(t)}catch(t){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function a(e,t){for(var o=e.split("|"),n=o.length;n--;)ae.attrHandle[o[n]]=t}function r(e,t){var i=t&&e,o=i&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(o)return o;if(i)for(;i=i.nextSibling;)if(i===t)return-1;return e?1:-1}function d(e){return function(t){var i=t.nodeName.toLowerCase();return"input"===i&&t.type===e}}function l(e){return function(t){var i=t.nodeName.toLowerCase();return("input"===i||"button"===i)&&t.type===e}}function p(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&oe(t)===e:t.disabled===e:!!("label"in t)&&t.disabled===e}}function c(e){return n(function(t){return t=+t,n(function(o,n){for(var s=e([],o.length,t),a=s.length,r;a--;)o[r=s[a]]&&(o[r]=!(n[r]=o[r]))})})}function u(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}function h(){}function f(e){for(var t=0,o=e.length,n="";t<o;t++)n+=e[t].value;return n}function g(e,t,i){var o=t.dir,n=t.next,s=n||o,a=i&&"parentNode"===s,r=C++;return t.first?function(t,i,n){for(;t=t[o];)if(1===t.nodeType||a)return e(t,i,n);return!1}:function(t,i,d){var l=[S,r],p,c,u;if(d){for(;t=t[o];)if((1===t.nodeType||a)&&e(t,i,d))return!0;}else for(;t=t[o];)if(1===t.nodeType||a)if(u=t[k]||(t[k]={}),c=u[t.uniqueID]||(u[t.uniqueID]={}),n&&n===t.nodeName.toLowerCase())t=t[o]||t;else{if((p=c[s])&&p[0]===S&&p[1]===r)return l[2]=p[2];if(c[s]=l,l[2]=e(t,i,d))return!0}return!1}}function m(e){return 1<e.length?function(t,o,n){for(var s=e.length;s--;)if(!e[s](t,o,n))return!1;return!0}:e[0]}function y(e,o,n){for(var s=0,a=o.length;s<a;s++)t(e,o[s],n);return n}function x(e,t,o,n,s){for(var a=[],r=0,d=e.length,l;r<d;r++)(l=e[r])&&(!o||o(l,n,s))&&(a.push(l),null!=t&&t.push(r));return a}function v(e,t,o,s,a,r){return s&&!s[k]&&(s=v(s)),a&&!a[k]&&(a=v(a,r)),n(function(n,r,d,l){var p=[],c=[],u=r.length,h=n||y(t||"*",d.nodeType?[d]:d,[]),f=e&&(n||!t)?x(h,p,e,d,l):h,g=o?a||(n?e:u||s)?[]:r:f,m,v,b;if(o&&o(f,g,d,l),s)for(m=x(g,c),s(m,[],d,l),v=m.length;v--;)(b=m[v])&&(g[c[v]]=!(f[c[v]]=b));if(!n)g=x(g===r?g.splice(u,g.length):g),a?a(null,r,g,l):P.apply(r,g);else if(a||e){if(a){for(m=[],v=g.length;v--;)(b=g[v])&&m.push(f[v]=b);a(null,g=[],m,l)}for(v=g.length;v--;)(b=g[v])&&-1<(m=a?I(n,b):p[v])&&(n[m]=!(r[m]=b))}})}function b(e){for(var t=e.length,o=ae.relative[e[0].type],n=o||ae.relative[" "],s=o?1:0,a=g(function(e){return e===l},n,!0),r=g(function(e){return-1<I(l,e)},n,!0),d=[function(e,t,i){var n=!o&&(i||t!==ue)||((l=t).nodeType?a(e,t,i):r(e,t,i));return l=null,n}],l,p,c;s<t;s++)if(p=ae.relative[e[s].type])d=[g(m(d),p)];else{if(p=ae.filter[e[s].type].apply(null,e[s].matches),p[k]){for(c=++s;c<t&&!ae.relative[e[c].type];c++);return v(1<s&&m(d),1<s&&f(e.slice(0,s-1).concat({value:" "===e[s-2].type?"*":""})).replace(W,"$1"),p,s<c&&b(e.slice(s,c)),c<t&&b(e=e.slice(c)),c<t&&f(e))}d.push(p)}return m(d)}function w(e,o){var s=0<o.length,a=0<e.length,r=function(n,r,d,l,p){var c=0,u="0",h=n&&[],f=[],g=ue,m=n||a&&ae.find.TAG("*",p),y=S+=null==g?1:Math.random()||.1,v=m.length,b,w,k;for(p&&(ue=r===me||r||p);u!==v&&null!=(b=m[u]);u++){if(a&&b){for(w=0,r||b.ownerDocument===me||(ge(b),d=!xe);k=e[w++];)if(k(b,r||me,d)){l.push(b);break}p&&(S=y)}s&&((b=!k&&b)&&c--,n&&h.push(b))}if(c+=u,s&&u!==c){for(w=0;k=o[w++];)k(h,f,r,d);if(n){if(0<c)for(;u--;)h[u]||f[u]||(f[u]=H.call(l));f=x(f)}P.apply(l,f),p&&!n&&0<f.length&&1<c+o.length&&t.uniqueSort(l)}return p&&(S=y,ue=g),h};return s?n(r):r}var k="sizzle"+1*new Date,T=e.document,S=0,C=0,$=o(),A=o(),j=o(),E=o(),D=function(e,t){return e===t&&(fe=!0),0},N={}.hasOwnProperty,L=[],H=L.pop,O=L.push,P=L.push,q=L.slice,I=function(e,t){for(var o=0,n=e.length;o<n;o++)if(e[o]===t)return o;return-1},z=/[\x20\t\r\n\f]+/g,W=/^[\x20\t\r\n\f]+|((?:^|[^\\])(?:\\.)*)[\x20\t\r\n\f]+$/g,M=/^[\x20\t\r\n\f]*,[\x20\t\r\n\f]*/,R=/^[\x20\t\r\n\f]*([>+~]|[\x20\t\r\n\f])[\x20\t\r\n\f]*/,B=/[\x20\t\r\n\f]|>/,F=/:((?:\\.|[\w-]|[^\0-\xa0])+)(?:\((('((?:\\.|[^\\'])*)'|"((?:\\.|[^\\"])*)")|((?:\\.|[^\\()[\]]|\[[\x20\t\r\n\f]*((?:\\.|[\w-]|[^\0-\xa0])+)(?:[\x20\t\r\n\f]*([*^$|!~]?=)[\x20\t\r\n\f]*(?:'((?:\\.|[^\\'])*)'|"((?:\\.|[^\\"])*)"|((?:\\.|[\w-]|[^\0-\xa0])+))|)[\x20\t\r\n\f]*\])*)|.*)\)|)/,U=/^(?:\\.|[\w-]|[^\0-\xa0])+$/,X={ID:/^#((?:\\.|[\w-]|[^\0-\xa0])+)/,CLASS:/^\.((?:\\.|[\w-]|[^\0-\xa0])+)/,TAG:/^((?:\\.|[\w-]|[^\0-\xa0])+|[*])/,ATTR:/^\[[\x20\t\r\n\f]*((?:\\.|[\w-]|[^\0-\xa0])+)(?:[\x20\t\r\n\f]*([*^$|!~]?=)[\x20\t\r\n\f]*(?:'((?:\\.|[^\\'])*)'|"((?:\\.|[^\\"])*)"|((?:\\.|[\w-]|[^\0-\xa0])+))|)[\x20\t\r\n\f]*\]/,PSEUDO:/^:((?:\\.|[\w-]|[^\0-\xa0])+)(?:\((('((?:\\.|[^\\'])*)'|"((?:\\.|[^\\"])*)")|((?:\\.|[^\\()[\]]|\[[\x20\t\r\n\f]*((?:\\.|[\w-]|[^\0-\xa0])+)(?:[\x20\t\r\n\f]*([*^$|!~]?=)[\x20\t\r\n\f]*(?:'((?:\\.|[^\\'])*)'|"((?:\\.|[^\\"])*)"|((?:\\.|[\w-]|[^\0-\xa0])+))|)[\x20\t\r\n\f]*\])*)|.*)\)|)/,CHILD:/^:(only|first|last|nth|nth-last)-(child|of-type)(?:\([\x20\t\r\n\f]*(even|odd|(([+-]|)(\d*)n|)[\x20\t\r\n\f]*(?:([+-]|)[\x20\t\r\n\f]*(\d+)|))[\x20\t\r\n\f]*\)|)/i,bool:/^(?:checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped)$/i,needsContext:/^[\x20\t\r\n\f]*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\([\x20\t\r\n\f]*((?:-\d)?\d*)[\x20\t\r\n\f]*\)|)(?=[^-]|$)/i},_=/HTML$/i,Y=/^(?:input|select|textarea|button)$/i,V=/^h\d$/i,G=/^[^{]+\{\s*\[native \w/,Q=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,K=/[+~]/,J=/\\([\da-f]{1,6}[\x20\t\r\n\f]?|([\x20\t\r\n\f])|.)/ig,Z=function(e,t,i){var o=String.fromCharCode,n="0x"+t-65536;return n!=n||i?t:0>n?o(n+65536):o(55296|n>>10,56320|1023&n)},ee=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,te=function(e,t){return t?"\0"===e?"\uFFFD":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ie=function(){ge()},oe=g(function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"}),ne,se,ae,re,de,le,pe,ce,ue,he,fe,ge,me,ye,xe,ve,be,we,ke;try{P.apply(L=q.call(T.childNodes),T.childNodes),L[T.childNodes.length].nodeType}catch(t){P={apply:L.length?function(e,t){O.apply(e,q.call(t))}:function(e,t){for(var o=e.length,n=0;e[o++]=t[n++];);e.length=o-1}}}for(ne in se=t.support={},de=t.isXML=function(e){var t=e.namespaceURI,i=(e.ownerDocument||e).documentElement;return!_.test(t||i&&i.nodeName||"HTML")},ge=t.setDocument=function(e){var t=e?e.ownerDocument||e:T,i,o;return t!==me&&9===t.nodeType&&t.documentElement?(me=t,ye=me.documentElement,xe=!de(me),T!==me&&(o=me.defaultView)&&o.top!==o&&(o.addEventListener?o.addEventListener("unload",ie,!1):o.attachEvent&&o.attachEvent("onunload",ie)),se.attributes=s(function(e){return e.className="i",!e.getAttribute("className")}),se.getElementsByTagName=s(function(e){return e.appendChild(me.createComment("")),!e.getElementsByTagName("*").length}),se.getElementsByClassName=G.test(me.getElementsByClassName),se.getById=s(function(e){return ye.appendChild(e).id=k,!me.getElementsByName||!me.getElementsByName(k).length}),se.getById?(ae.filter.ID=function(e){var t=e.replace(J,Z);return function(e){return e.getAttribute("id")===t}},ae.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&xe){var i=t.getElementById(e);return i?[i]:[]}}):(ae.filter.ID=function(e){var t=e.replace(J,Z);return function(e){var i="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return i&&i.value===t}},ae.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&xe){var o=t.getElementById(e),n,s,a;if(o){if(n=o.getAttributeNode("id"),n&&n.value===e)return[o];for(a=t.getElementsByName(e),s=0;o=a[s++];)if(n=o.getAttributeNode("id"),n&&n.value===e)return[o]}return[]}}),ae.find.TAG=se.getElementsByTagName?function(e,t){return"undefined"==typeof t.getElementsByTagName?se.qsa?t.querySelectorAll(e):void 0:t.getElementsByTagName(e)}:function(e,t){var o=[],n=0,s=t.getElementsByTagName(e),a;if("*"===e){for(;a=s[n++];)1===a.nodeType&&o.push(a);return o}return s},ae.find.CLASS=se.getElementsByClassName&&function(e,t){if("undefined"!=typeof t.getElementsByClassName&&xe)return t.getElementsByClassName(e)},be=[],ve=[],(se.qsa=G.test(me.querySelectorAll))&&(s(function(e){ye.appendChild(e).innerHTML="<a id='"+k+"'></a><select id='"+k+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&ve.push("[*^$]=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),e.querySelectorAll("[selected]").length||ve.push("\\[[\\x20\\t\\r\\n\\f]*(?:value|checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped)"),e.querySelectorAll("[id~="+k+"-]").length||ve.push("~="),e.querySelectorAll(":checked").length||ve.push(":checked"),e.querySelectorAll("a#"+k+"+*").length||ve.push(".#.+[+~]")}),s(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=me.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&ve.push("name[\\x20\\t\\r\\n\\f]*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&ve.push(":enabled",":disabled"),ye.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&ve.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),ve.push(",.*:")})),(se.matchesSelector=G.test(we=ye.matches||ye.webkitMatchesSelector||ye.mozMatchesSelector||ye.oMatchesSelector||ye.msMatchesSelector))&&s(function(e){se.disconnectedMatch=we.call(e,"*"),we.call(e,"[s!='']:x"),be.push("!=",":((?:\\\\.|[\\w-]|[^\0-\\xa0])+)(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|\\[[\\x20\\t\\r\\n\\f]*((?:\\\\.|[\\w-]|[^\0-\\xa0])+)(?:[\\x20\\t\\r\\n\\f]*([*^$|!~]?=)[\\x20\\t\\r\\n\\f]*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|((?:\\\\.|[\\w-]|[^\0-\\xa0])+))|)[\\x20\\t\\r\\n\\f]*\\])*)|.*)\\)|)")}),ve=ve.length&&new RegExp(ve.join("|")),be=be.length&&new RegExp(be.join("|")),i=G.test(ye.compareDocumentPosition),ke=i||G.test(ye.contains)?function(e,t){var i=9===e.nodeType?e.documentElement:e,o=t&&t.parentNode;return e===o||!!(o&&1===o.nodeType&&(i.contains?i.contains(o):e.compareDocumentPosition&&16&e.compareDocumentPosition(o)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},D=i?function(e,t){if(e===t)return fe=!0,0;var i=!e.compareDocumentPosition-!t.compareDocumentPosition;return i?i:(i=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&i||!se.sortDetached&&t.compareDocumentPosition(e)===i?e===me||e.ownerDocument===T&&ke(T,e)?-1:t===me||t.ownerDocument===T&&ke(T,t)?1:he?I(he,e)-I(he,t):0:4&i?-1:1)}:function(e,t){if(e===t)return fe=!0,0;var o=0,n=e.parentNode,s=t.parentNode,a=[e],d=[t],l;if(!n||!s)return e===me?-1:t===me?1:n?-1:s?1:he?I(he,e)-I(he,t):0;if(n===s)return r(e,t);for(l=e;l=l.parentNode;)a.unshift(l);for(l=t;l=l.parentNode;)d.unshift(l);for(;a[o]===d[o];)o++;return o?r(a[o],d[o]):a[o]===T?-1:d[o]===T?1:0},me):me},t.matches=function(e,i){return t(e,null,null,i)},t.matchesSelector=function(e,i){if((e.ownerDocument||e)!==me&&ge(e),se.matchesSelector&&xe&&!E[i+" "]&&(!be||!be.test(i))&&(!ve||!ve.test(i)))try{var o=we.call(e,i);if(o||se.disconnectedMatch||e.document&&11!==e.document.nodeType)return o}catch(t){E(i,!0)}return 0<t(i,me,null,[e]).length},t.contains=function(e,t){return(e.ownerDocument||e)!==me&&ge(e),ke(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==me&&ge(e);var i=ae.attrHandle[t.toLowerCase()],o=i&&N.call(ae.attrHandle,t.toLowerCase())?i(e,t,!xe):void 0;return void 0===o?se.attributes||!xe?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null:o},t.escape=function(e){return(e+"").replace(ee,te)},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t=[],o=0,n=0,s;if(fe=!se.detectDuplicates,he=!se.sortStable&&e.slice(0),e.sort(D),fe){for(;s=e[n++];)s===e[n]&&(o=t.push(n));for(;o--;)e.splice(t[o],1)}return he=null,e},re=t.getText=function(e){var t="",o=0,n=e.nodeType,s;if(!n)for(;s=e[o++];)t+=re(s);else if(1===n||9===n||11===n){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)t+=re(e)}else if(3===n||4===n)return e.nodeValue;return t},ae=t.selectors={cacheLength:50,createPseudo:n,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(J,Z),e[3]=(e[3]||e[4]||e[5]||"").replace(J,Z),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(!e[3]&&t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t=!e[6]&&e[2],i;return X.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":t&&F.test(t)&&(i=le(t,!0))&&(i=t.indexOf(")",t.length-i)-t.length)&&(e[0]=e[0].slice(0,i),e[2]=t.slice(0,i)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(J,Z).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=$[e+" "];return t||(t=new RegExp("(^|[\\x20\\t\\r\\n\\f])"+e+"([\\x20\\t\\r\\n\\f]|$)"))&&$(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,i,o){return function(n){var s=t.attr(n,e);return null==s?"!="===i:!i||(s+="","="===i?s===o:"!="===i?s!==o:"^="===i?o&&0===s.indexOf(o):"*="===i?o&&-1<s.indexOf(o):"$="===i?o&&s.slice(-o.length)===o:"~="===i?-1<(" "+s.replace(z," ")+" ").indexOf(o):"|="==i&&(s===o||s.slice(0,o.length+1)===o+"-"))}},CHILD:function(e,t,i,o,n){var s="nth"!==e.slice(0,3),a="last"!==e.slice(-4),r="of-type"===t;return 1===o&&0===n?function(e){return!!e.parentNode}:function(t,i,d){var l=s===a?"previousSibling":"nextSibling",p=t.parentNode,c=r&&t.nodeName.toLowerCase(),u=!d&&!r,h=!1,f,g,m,y,x,v;if(p){if(s){for(;l;){for(y=t;y=y[l];)if(r?y.nodeName.toLowerCase()===c:1===y.nodeType)return!1;v=l="only"===e&&!v&&"nextSibling"}return!0}if(v=[a?p.firstChild:p.lastChild],a&&u){for(y=p,m=y[k]||(y[k]={}),g=m[y.uniqueID]||(m[y.uniqueID]={}),f=g[e]||[],x=f[0]===S&&f[1],h=x&&f[2],y=x&&p.childNodes[x];y=++x&&y&&y[l]||(h=x=0)||v.pop();)if(1===y.nodeType&&++h&&y===t){g[e]=[S,x,h];break}}else if(u&&(y=t,m=y[k]||(y[k]={}),g=m[y.uniqueID]||(m[y.uniqueID]={}),f=g[e]||[],x=f[0]===S&&f[1],h=x),!1===h)for(;(y=++x&&y&&y[l]||(h=x=0)||v.pop())&&!((r?y.nodeName.toLowerCase()===c:1===y.nodeType)&&++h&&(u&&(m=y[k]||(y[k]={}),g=m[y.uniqueID]||(m[y.uniqueID]={}),g[e]=[S,h]),y===t)););return h-=n,h===o||0==h%o&&0<=h/o}}},PSEUDO:function(e,o){var s=ae.pseudos[e]||ae.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e),i;return s[k]?s(o):1<s.length?(i=[e,e,"",o],ae.setFilters.hasOwnProperty(e.toLowerCase())?n(function(e,t){for(var n=s(e,o),a=n.length,r;a--;)r=I(e,n[a]),e[r]=!(t[r]=n[a])}):function(e){return s(e,0,i)}):s}},pseudos:{not:n(function(e){var t=[],i=[],o=pe(e.replace(W,"$1"));return o[k]?n(function(e,t,n,s){for(var a=o(e,null,s,[]),r=e.length,d;r--;)(d=a[r])&&(e[r]=!(t[r]=d))}):function(e,n,s){return t[0]=e,o(t,null,s,i),t[0]=null,!i.pop()}}),has:n(function(e){return function(i){return 0<t(e,i).length}}),contains:n(function(e){return e=e.replace(J,Z),function(t){return-1<(t.textContent||re(t)).indexOf(e)}}),lang:n(function(e){return U.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(J,Z).toLowerCase(),function(t){var i;do if(i=xe?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return i=i.toLowerCase(),i===e||0===i.indexOf(e+"-");while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var i=e.location&&e.location.hash;return i&&i.slice(1)===t.id},root:function(e){return e===ye},focus:function(e){return e===me.activeElement&&(!me.hasFocus||me.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:p(!1),disabled:p(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(6>e.nodeType)return!1;return!0},parent:function(e){return!ae.pseudos.empty(e)},header:function(e){return V.test(e.nodeName)},input:function(e){return Y.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:c(function(){return[0]}),last:c(function(e,t){return[t-1]}),eq:c(function(e,t,i){return[0>i?i+t:i]}),even:c(function(e,t){for(var o=0;o<t;o+=2)e.push(o);return e}),odd:c(function(e,t){for(var o=1;o<t;o+=2)e.push(o);return e}),lt:c(function(e,t,o){for(var n=0>o?o+t:o>t?t:o;0<=--n;)e.push(n);return e}),gt:c(function(e,t,o){for(var n=0>o?o+t:o;++n<t;)e.push(n);return e})}},ae.pseudos.nth=ae.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})ae.pseudos[ne]=d(ne);for(ne in{submit:!0,reset:!0})ae.pseudos[ne]=l(ne);return h.prototype=ae.filters=ae.pseudos,ae.setFilters=new h,le=t.tokenize=function(e,i){var o=A[e+" "],n,s,a,r,d,l,p;if(o)return i?0:o.slice(0);for(d=e,l=[],p=ae.preFilter;d;){for(r in(!n||(s=M.exec(d)))&&(s&&(d=d.slice(s[0].length)||d),l.push(a=[])),n=!1,(s=R.exec(d))&&(n=s.shift(),a.push({value:n,type:s[0].replace(W," ")}),d=d.slice(n.length)),ae.filter)(s=X[r].exec(d))&&(!p[r]||(s=p[r](s)))&&(n=s.shift(),a.push({value:n,type:r,matches:s}),d=d.slice(n.length));if(!n)break}return i?d.length:d?t.error(e):A(e,l).slice(0)},pe=t.compile=function(e,t){var o=[],n=[],s=j[e+" "],a;if(!s){for(t||(t=le(e)),a=t.length;a--;)s=b(t[a]),s[k]?o.push(s):n.push(s);s=j(e,w(n,o)),s.selector=e}return s},ce=t.select=function(e,t,o,n){var s="function"==typeof e&&e,a=!n&&le(e=s.selector||e),r,d,l,p,c;if(o=o||[],1===a.length){if(d=a[0]=a[0].slice(0),2<d.length&&"ID"===(l=d[0]).type&&9===t.nodeType&&xe&&ae.relative[d[1].type]){if(t=(ae.find.ID(l.matches[0].replace(J,Z),t)||[])[0],!t)return o;s&&(t=t.parentNode),e=e.slice(d.shift().value.length)}for(r=X.needsContext.test(e)?0:d.length;r--&&(l=d[r],!ae.relative[p=l.type]);)if((c=ae.find[p])&&(n=c(l.matches[0].replace(J,Z),K.test(d[0].type)&&u(t.parentNode)||t))){if(d.splice(r,1),e=n.length&&f(d),!e)return P.apply(o,n),o;break}}return(s||pe(e,a))(n,t,!xe,o,!t||K.test(e)&&u(t.parentNode)||t),o},se.sortStable=k.split("").sort(D).join("")===k,se.detectDuplicates=!!fe,ge(),se.sortDetached=s(function(e){return 1&e.compareDocumentPosition(me.createElement("fieldset"))}),s(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||a("type|href|height|width",function(e,t,i){if(!i)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),se.attributes&&s(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||a("value",function(e,t,i){if(!i&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),s(function(e){return null==e.getAttribute("disabled")})||a("checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",function(e,t,i){var o;if(!i)return!0===e[t]?t.toLowerCase():(o=e.getAttributeNode(t))&&o.specified?o.value:null}),t}(e);je.find=De,je.expr=De.selectors,je.expr[":"]=je.expr.pseudos,je.uniqueSort=je.unique=De.uniqueSort,je.text=De.getText,je.isXMLDoc=De.isXML,je.contains=De.contains,je.escapeSelector=De.escape;var Ne=function(e,t,i){for(var o=[];(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(void 0!==i&&je(e).is(i))break;o.push(e)}return o},Le=function(e,t){for(var i=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&i.push(e);return i},He=je.expr.match.needsContext,Oe=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;je.filter=function(e,t,i){var o=t[0];return i&&(e=":not("+e+")"),1===t.length&&1===o.nodeType?je.find.matchesSelector(o,e)?[o]:[]:je.find.matches(e,je.grep(t,function(e){return 1===e.nodeType}))},je.fn.extend({find:function(e){var t=this.length,o=this,n,s;if("string"!=typeof e)return this.pushStack(je(e).filter(function(){for(n=0;n<t;n++)if(je.contains(o[n],this))return!0}));for(s=this.pushStack([]),n=0;n<t;n++)je.find(e,o[n],s);return 1<t?je.uniqueSort(s):s},filter:function(e){return this.pushStack(p(this,e||[],!1))},not:function(e){return this.pushStack(p(this,e||[],!0))},is:function(e){return!!p(this,"string"==typeof e&&He.test(e)?je(e):e||[],!1).length}});var Pe=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,qe=je.fn.init=function(e,t,i){var o,n;if(!e)return this;if(i=i||Ie,"string"==typeof e){if(o="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:Pe.exec(e),o&&(o[1]||!t)){if(o[1]){if(t=t instanceof je?t[0]:t,je.merge(this,je.parseHTML(o[1],t&&t.nodeType?t.ownerDocument||t:ue,!0)),Oe.test(o[1])&&je.isPlainObject(t))for(o in t)Se(this[o])?this[o](t[o]):this.attr(o,t[o]);return this}return n=ue.getElementById(o[2]),n&&(this[0]=n,this.length=1),this}return!t||t.jquery?(t||i).find(e):this.constructor(t).find(e)}return e.nodeType?(this[0]=e,this.length=1,this):Se(e)?void 0===i.ready?e(je):i.ready(e):je.makeArray(e,this)},Ie;qe.prototype=je.fn,Ie=je(ue);var ze=/^(?:parents|prev(?:Until|All))/,We={children:!0,contents:!0,next:!0,prev:!0};je.fn.extend({has:function(e){var t=je(e,this),o=t.length;return this.filter(function(){for(var e=0;e<o;e++)if(je.contains(this,t[e]))return!0})},closest:function(e,t){var o=0,n=this.length,s=[],a="string"!=typeof e&&je(e),r;if(!He.test(e))for(;o<n;o++)for(r=this[o];r&&r!==t;r=r.parentNode)if(11>r.nodeType&&(a?-1<a.index(r):1===r.nodeType&&je.find.matchesSelector(r,e))){s.push(r);break}return this.pushStack(1<s.length?je.uniqueSort(s):s)},index:function(e){return e?"string"==typeof e?ye.call(je(e),this[0]):ye.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(je.uniqueSort(je.merge(this.get(),je(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),je.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return Ne(e,"parentNode")},parentsUntil:function(e,t,i){return Ne(e,"parentNode",i)},next:function(e){return c(e,"nextSibling")},prev:function(e){return c(e,"previousSibling")},nextAll:function(e){return Ne(e,"nextSibling")},prevAll:function(e){return Ne(e,"previousSibling")},nextUntil:function(e,t,i){return Ne(e,"nextSibling",i)},prevUntil:function(e,t,i){return Ne(e,"previousSibling",i)},siblings:function(e){return Le((e.parentNode||{}).firstChild,e)},children:function(e){return Le(e.firstChild)},contents:function(e){return"undefined"==typeof e.contentDocument?(l(e,"template")&&(e=e.content||e),je.merge([],e.childNodes)):e.contentDocument}},function(e,t){je.fn[e]=function(i,o){var n=je.map(this,t,i);return"Until"!==e.slice(-5)&&(o=i),o&&"string"==typeof o&&(n=je.filter(o,n)),1<this.length&&(!We[e]&&je.uniqueSort(n),ze.test(e)&&n.reverse()),this.pushStack(n)}});var Me=/[^\x20\t\r\n\f]+/g;je.Callbacks=function(e){e="string"==typeof e?u(e):je.extend({},e);var t=[],i=[],o=-1,n=function(){for(p=p||e.once,l=a=!0;i.length;o=-1)for(d=i.shift();++o<t.length;)!1===t[o].apply(d[0],d[1])&&e.stopOnFalse&&(o=t.length,d=!1);e.memory||(d=!1),a=!1,p&&(d?t=[]:t="")},s={add:function(){return t&&(d&&!a&&(o=t.length-1,i.push(d)),function i(o){je.each(o,function(o,n){Se(n)?(!e.unique||!s.has(n))&&t.push(n):n&&n.length&&"string"!==r(n)&&i(n)})}(arguments),d&&!a&&n()),this},remove:function(){return je.each(arguments,function(e,i){for(var n;-1<(n=je.inArray(i,t,n));)t.splice(n,1),n<=o&&o--}),this},has:function(e){return e?-1<je.inArray(e,t):0<t.length},empty:function(){return t&&(t=[]),this},disable:function(){return p=i=[],t=d="",this},disabled:function(){return!t},lock:function(){return p=i=[],d||a||(t=d=""),this},locked:function(){return!!p},fireWith:function(e,t){return p||(t=t||[],t=[e,t.slice?t.slice():t],i.push(t),!a&&n()),this},fire:function(){return s.fireWith(this,arguments),this},fired:function(){return!!l}},a,d,l,p;return s},je.extend({Deferred:function(t){var o=[["notify","progress",je.Callbacks("memory"),je.Callbacks("memory"),2],["resolve","done",je.Callbacks("once memory"),je.Callbacks("once memory"),0,"resolved"],["reject","fail",je.Callbacks("once memory"),je.Callbacks("once memory"),1,"rejected"]],n="pending",s={state:function(){return n},always:function(){return a.done(arguments).fail(arguments),this},catch:function(e){return s.then(null,e)},pipe:function(){var e=arguments;return je.Deferred(function(t){je.each(o,function(o,i){var n=Se(e[i[4]])&&e[i[4]];a[i[1]](function(){var e=n&&n.apply(this,arguments);e&&Se(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[i[0]+"With"](this,n?[e]:arguments)})}),e=null}).promise()},then:function(t,i,n){function s(t,i,o,n){return function(){var r=this,d=arguments,l=function(){var e,l;if(!(t<a)){if(e=o.apply(r,d),e===i.promise())throw new TypeError("Thenable self-resolution");l=e&&("object"==typeof e||"function"==typeof e)&&e.then,Se(l)?n?l.call(e,s(a,i,h,n),s(a,i,f,n)):(a++,l.call(e,s(a,i,h,n),s(a,i,f,n),s(a,i,h,i.notifyWith))):(o!==h&&(r=void 0,d=[e]),(n||i.resolveWith)(r,d))}},p=n?l:function(){try{l()}catch(n){je.Deferred.exceptionHook&&je.Deferred.exceptionHook(n,p.stackTrace),t+1>=a&&(o!==f&&(r=void 0,d=[n]),i.rejectWith(r,d))}};t?p():(je.Deferred.getStackHook&&(p.stackTrace=je.Deferred.getStackHook()),e.setTimeout(p))}}var a=0;return je.Deferred(function(e){o[0][3].add(s(0,e,Se(n)?n:h,e.notifyWith)),o[1][3].add(s(0,e,Se(t)?t:h)),o[2][3].add(s(0,e,Se(i)?i:f))}).promise()},promise:function(e){return null==e?s:je.extend(e,s)}},a={};return je.each(o,function(e,t){var i=t[2],r=t[5];s[t[1]]=i.add,r&&i.add(function(){n=r},o[3-e][2].disable,o[3-e][3].disable,o[0][2].lock,o[0][3].lock),i.add(t[3].fire),a[t[0]]=function(){return a[t[0]+"With"](this===a?void 0:this,arguments),this},a[t[0]+"With"]=i.fireWith}),s.promise(a),t&&t.call(a,a),a},when:function(e){var t=arguments.length,o=t,n=Array(o),s=fe.call(arguments),a=je.Deferred(),r=function(e){return function(i){n[e]=this,s[e]=1<arguments.length?fe.call(arguments):i,--t||a.resolveWith(n,s)}};if(1>=t&&(g(e,a.done(r(o)).resolve,a.reject,!t),"pending"===a.state()||Se(s[o]&&s[o].then)))return a.then();for(;o--;)g(s[o],r(o),a.reject);return a.promise()}});var Re=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;je.Deferred.exceptionHook=function(t,i){e.console&&e.console.warn&&t&&Re.test(t.name)&&e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,i)},je.readyException=function(t){e.setTimeout(function(){throw t})};var Be=je.Deferred();je.fn.ready=function(e){return Be.then(e).catch(function(e){je.readyException(e)}),this},je.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?! --je.readyWait:!je.isReady)&&(je.isReady=!0,!0!==e&&0<--je.readyWait||Be.resolveWith(ue,[je]))}}),je.ready.then=Be.then,"complete"!==ue.readyState&&("loading"===ue.readyState||ue.documentElement.doScroll)?(ue.addEventListener("DOMContentLoaded",m),e.addEventListener("load",m)):e.setTimeout(je.ready);var Fe=function(e,t,o,n,s,a,d){var l=0,p=e.length,c=null==o;if("object"===r(o))for(l in s=!0,o)Fe(e,t,l,o[l],!0,a,d);else if(void 0!==n&&(s=!0,Se(n)||(d=!0),c&&(d?(t.call(e,n),t=null):(c=t,t=function(e,t,i){return c.call(je(e),i)})),t))for(;l<p;l++)t(e[l],o,d?n:n.call(e[l],l,t(e[l],o)));return s?e:c?t.call(e):p?t(e[0],o):a},Ue=/^-ms-/,Xe=/-([a-z])/g,_e=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};v.uid=1,v.prototype={cache:function(e){var t=e[this.expando];return t||(t={},_e(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,i){var o=this.cache(e),n;if("string"==typeof t)o[x(t)]=i;else for(n in t)o[x(n)]=t[n];return o},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][x(t)]},access:function(e,t,i){return void 0===t||t&&"string"==typeof t&&void 0===i?this.get(e,t):(this.set(e,t,i),void 0===i?t:i)},remove:function(e,t){var o=e[this.expando],n;if(void 0!==o){if(void 0!==t)for(Array.isArray(t)?t=t.map(x):(t=x(t),t=(t in o)?[t]:t.match(Me)||[]),n=t.length;n--;)delete o[t[n]];(void 0===t||je.isEmptyObject(o))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!je.isEmptyObject(t)}};var Ye=new v,Ve=new v,Ge=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Qe=/[A-Z]/g;je.extend({hasData:function(e){return Ve.hasData(e)||Ye.hasData(e)},data:function(e,t,i){return Ve.access(e,t,i)},removeData:function(e,t){Ve.remove(e,t)},_data:function(e,t,i){return Ye.access(e,t,i)},_removeData:function(e,t){Ye.remove(e,t)}}),je.fn.extend({data:function(e,t){var o=this[0],n=o&&o.attributes,s,a,r;if(void 0===e){if(this.length&&(r=Ve.get(o),1===o.nodeType&&!Ye.get(o,"hasDataAttrs"))){for(s=n.length;s--;)n[s]&&(a=n[s].name,0===a.indexOf("data-")&&(a=x(a.slice(5)),w(o,a,r[a])));Ye.set(o,"hasDataAttrs",!0)}return r}return"object"==typeof e?this.each(function(){Ve.set(this,e)}):Fe(this,function(t){var i;return o&&void 0===t?(i=Ve.get(o,e),void 0!==i)?i:(i=w(o,e),void 0===i?void 0:i):void this.each(function(){Ve.set(this,e,t)})},null,t,1<arguments.length,null,!0)},removeData:function(e){return this.each(function(){Ve.remove(this,e)})}}),je.extend({queue:function(e,t,i){var o;if(e)return t=(t||"fx")+"queue",o=Ye.get(e,t),i&&(!o||Array.isArray(i)?o=Ye.access(e,t,je.makeArray(i)):o.push(i)),o||[]},dequeue:function(e,t){t=t||"fx";var i=je.queue(e,t),o=i.length,n=i.shift(),s=je._queueHooks(e,t),a=function(){je.dequeue(e,t)};"inprogress"===n&&(n=i.shift(),o--),n&&("fx"===t&&i.unshift("inprogress"),delete s.stop,n.call(e,a,s)),!o&&s&&s.empty.fire()},_queueHooks:function(e,t){var i=t+"queueHooks";return Ye.get(e,i)||Ye.access(e,i,{empty:je.Callbacks("once memory").add(function(){Ye.remove(e,[t+"queue",i])})})}}),je.fn.extend({queue:function(e,t){var i=2;return"string"!=typeof e&&(t=e,e="fx",i--),arguments.length<i?je.queue(this[0],e):void 0===t?this:this.each(function(){var i=je.queue(this,e,t);je._queueHooks(this,e),"fx"===e&&"inprogress"!==i[0]&&je.dequeue(this,e)})},dequeue:function(e){return this.each(function(){je.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var o=1,n=je.Deferred(),s=this,a=this.length,r=function(){--o||n.resolveWith(s,[s])},d;for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)d=Ye.get(s[a],e+"queueHooks"),d&&d.empty&&(o++,d.empty.add(r));return r(),n.promise(t)}});var Ke=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Je=new RegExp("^(?:([+-])=|)("+Ke+")([a-z%]*)$","i"),Ze=["Top","Right","Bottom","Left"],et=ue.documentElement,tt=function(e){return je.contains(e.ownerDocument,e)},it={composed:!0};et.getRootNode&&(tt=function(e){return je.contains(e.ownerDocument,e)||e.getRootNode(it)===e.ownerDocument});var ot=function(e,t){return e=t||e,"none"===e.style.display||""===e.style.display&&tt(e)&&"none"===je.css(e,"display")},nt=function(e,t,i,o){var n={},s,a;for(a in t)n[a]=e.style[a],e.style[a]=t[a];for(a in s=i.apply(e,o||[]),t)e.style[a]=n[a];return s},st={};je.fn.extend({show:function(){return S(this,!0)},hide:function(){return S(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){ot(this)?je(this).show():je(this).hide()})}});var at=/^(?:checkbox|radio)$/i,rt=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,dt=/^$|^module$|\/(?:java|ecma)script/i,lt={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};lt.optgroup=lt.option,lt.tbody=lt.tfoot=lt.colgroup=lt.caption=lt.thead,lt.th=lt.td;var pt=/<|&#?\w+;/;(function(){var e=ue.createDocumentFragment(),t=e.appendChild(ue.createElement("div")),i=ue.createElement("input");i.setAttribute("type","radio"),i.setAttribute("checked","checked"),i.setAttribute("name","t"),t.appendChild(i),Te.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,t.innerHTML="<textarea>x</textarea>",Te.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue})();var ct=/^key/,ut=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,ht=/^([^.]*)(?:\.(.+)|)/;je.event={global:{},add:function(i,o,n,s,a){var r=Ye.get(i),d,l,p,c,u,e,h,f,g,m,y;if(r)for(n.handler&&(d=n,n=d.handler,a=d.selector),a&&je.find.matchesSelector(et,a),n.guid||(n.guid=je.guid++),(c=r.events)||(c=r.events={}),(l=r.handle)||(l=r.handle=function(t){return"undefined"!=typeof je&&je.event.triggered!==t.type?je.event.dispatch.apply(i,arguments):void 0}),o=(o||"").match(Me)||[""],u=o.length;u--;)(p=ht.exec(o[u])||[],g=y=p[1],m=(p[2]||"").split(".").sort(),!!g)&&(h=je.event.special[g]||{},g=(a?h.delegateType:h.bindType)||g,h=je.event.special[g]||{},e=je.extend({type:g,origType:y,data:s,handler:n,guid:n.guid,selector:a,needsContext:a&&je.expr.match.needsContext.test(a),namespace:m.join(".")},d),(f=c[g])||(f=c[g]=[],f.delegateCount=0,(!h.setup||!1===h.setup.call(i,s,m,l))&&i.addEventListener&&i.addEventListener(g,l)),h.add&&(h.add.call(i,e),!e.handler.guid&&(e.handler.guid=n.guid)),a?f.splice(f.delegateCount++,0,e):f.push(e),je.event.global[g]=!0)},remove:function(e,i,o,n,s){var a=Ye.hasData(e)&&Ye.get(e),r,d,l,p,c,u,h,f,g,m,y;if(a&&(p=a.events)){for(i=(i||"").match(Me)||[""],c=i.length;c--;){if(l=ht.exec(i[c])||[],g=y=l[1],m=(l[2]||"").split(".").sort(),!g){for(g in p)je.event.remove(e,g+i[c],o,n,!0);continue}for(h=je.event.special[g]||{},g=(n?h.delegateType:h.bindType)||g,f=p[g]||[],l=l[2]&&new RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"),d=r=f.length;r--;)u=f[r],(s||y===u.origType)&&(!o||o.guid===u.guid)&&(!l||l.test(u.namespace))&&(!n||n===u.selector||"**"===n&&u.selector)&&(f.splice(r,1),u.selector&&f.delegateCount--,h.remove&&h.remove.call(e,u));d&&!f.length&&((!h.teardown||!1===h.teardown.call(e,m,a.handle))&&je.removeEvent(e,g,a.handle),delete p[g])}je.isEmptyObject(p)&&Ye.remove(e,"handle events")}},dispatch:function(e){var t=je.event.fix(e),o=Array(arguments.length),n=(Ye.get(this,"events")||{})[t.type]||[],s=je.event.special[t.type]||{},a,r,d,l,p,c;for(o[0]=t,a=1;a<arguments.length;a++)o[a]=arguments[a];if(t.delegateTarget=this,!(s.preDispatch&&!1===s.preDispatch.call(this,t))){for(c=je.event.handlers.call(this,t,n),a=0;(l=c[a++])&&!t.isPropagationStopped();)for(t.currentTarget=l.elem,r=0;(p=l.handlers[r++])&&!t.isImmediatePropagationStopped();)(!t.rnamespace||!1===p.namespace||t.rnamespace.test(p.namespace))&&(t.handleObj=p,t.data=p.data,d=((je.event.special[p.origType]||{}).handle||p.handler).apply(l.elem,o),void 0!==d&&!1===(t.result=d)&&(t.preventDefault(),t.stopPropagation()));return s.postDispatch&&s.postDispatch.call(this,t),t.result}},handlers:function(e,t){var o=[],n=t.delegateCount,s=e.target,a,r,d,l,p;if(n&&s.nodeType&&!("click"===e.type&&1<=e.button))for(;s!==this;s=s.parentNode||this)if(1===s.nodeType&&("click"!==e.type||!0!==s.disabled)){for(l=[],p={},a=0;a<n;a++)r=t[a],d=r.selector+" ",void 0===p[d]&&(p[d]=r.needsContext?-1<je(d,this).index(s):je.find(d,this,null,[s]).length),p[d]&&l.push(r);l.length&&o.push({elem:s,handlers:l})}return s=this,n<t.length&&o.push({elem:s,handlers:t.slice(n)}),o},addProp:function(e,t){Object.defineProperty(je.Event.prototype,e,{enumerable:!0,configurable:!0,get:Se(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[je.expando]?e:new je.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return at.test(t.type)&&t.click&&l(t,"input")&&H(t,"click",j),!1},trigger:function(e){var t=this||e;return at.test(t.type)&&t.click&&l(t,"input")&&H(t,"click"),!0},_default:function(e){var t=e.target;return at.test(t.type)&&t.click&&l(t,"input")&&Ye.get(t,"click")||l(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},je.removeEvent=function(e,t,i){e.removeEventListener&&e.removeEventListener(t,i)},je.Event=function(e,t){return this instanceof je.Event?void(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?j:E,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&je.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[je.expando]=!0):new je.Event(e,t)},je.Event.prototype={constructor:je.Event,isDefaultPrevented:E,isPropagationStopped:E,isImmediatePropagationStopped:E,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=j,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=j,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=j,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},je.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&ct.test(e.type)?null==e.charCode?e.keyCode:e.charCode:!e.which&&void 0!==t&&ut.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},je.event.addProp),je.each({focus:"focusin",blur:"focusout"},function(e,t){je.event.special[e]={setup:function(){return H(this,e,D),!1},trigger:function(){return H(this,e),!0},delegateType:t}}),je.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){je.event.special[e]={delegateType:t,bindType:t,handle:function(e){var i=this,o=e.relatedTarget,n=e.handleObj,s;return o&&(o===i||je.contains(i,o))||(e.type=n.origType,s=n.handler.apply(this,arguments),e.type=t),s}}}),je.fn.extend({on:function(e,t,i,o){return L(this,e,t,i,o)},one:function(e,t,i,o){return L(this,e,t,i,o,1)},off:function(e,t,i){var o,n;if(e&&e.preventDefault&&e.handleObj)return o=e.handleObj,je(e.delegateTarget).off(o.namespace?o.origType+"."+o.namespace:o.origType,o.selector,o.handler),this;if("object"==typeof e){for(n in e)this.off(n,t,e[n]);return this}return(!1===t||"function"==typeof t)&&(i=t,t=void 0),!1===i&&(i=E),this.each(function(){je.event.remove(this,e,i,t)})}});var ft=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,gt=/<script|<style|<link/i,mt=/checked\s*(?:[^=]|=\s*.checked.)/i,yt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;je.extend({htmlPrefilter:function(e){return e.replace(ft,"<$1></$2>")},clone:function(e,t,o){var n=e.cloneNode(!0),s=tt(e),a,r,d,p;if(!Te.noCloneChecked&&(1===e.nodeType||11===e.nodeType)&&!je.isXMLDoc(e))for(p=C(n),d=C(e),(a=0,r=d.length);a<r;a++)z(d[a],p[a]);if(t)if(o)for(d=d||C(e),p=p||C(n),(a=0,r=d.length);a<r;a++)I(d[a],p[a]);else I(e,n);return p=C(n,"script"),0<p.length&&$(p,!s&&C(e,"script")),n},cleanData:function(e){for(var t=je.event.special,o=0,n,s,a;void 0!==(s=e[o]);o++)if(_e(s)){if(n=s[Ye.expando]){if(n.events)for(a in n.events)t[a]?je.event.remove(s,a):je.removeEvent(s,a,n.handle);s[Ye.expando]=void 0}s[Ve.expando]&&(s[Ve.expando]=void 0)}}}),je.fn.extend({detach:function(e){return M(this,e,!0)},remove:function(e){return M(this,e)},text:function(e){return Fe(this,function(e){return void 0===e?je.text(this):this.empty().each(function(){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&(this.textContent=e)})},null,e,arguments.length)},append:function(){return W(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=O(this,e);t.appendChild(e)}})},prepend:function(){return W(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=O(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return W(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return W(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e=0,t;null!=(t=this[e]);e++)1===t.nodeType&&(je.cleanData(C(t,!1)),t.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return je.clone(this,e,t)})},html:function(e){return Fe(this,function(e){var t=this[0]||{},o=0,n=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!gt.test(e)&&!lt[(rt.exec(e)||["",""])[1].toLowerCase()]){e=je.htmlPrefilter(e);try{for(;o<n;o++)t=this[o]||{},1===t.nodeType&&(je.cleanData(C(t,!1)),t.innerHTML=e);t=0}catch(t){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return W(this,arguments,function(t){var i=this.parentNode;0>je.inArray(this,e)&&(je.cleanData(C(this)),i&&i.replaceChild(t,this))},e)}}),je.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){je.fn[e]=function(e){for(var o=[],n=je(e),s=n.length-1,a=0,r;a<=s;a++)r=a===s?this:this.clone(!0),je(n[a])[t](r),me.apply(o,r.get());return this.pushStack(o)}});var xt=new RegExp("^("+Ke+")(?!px)[a-z%]+$","i"),vt=function(t){var i=t.ownerDocument.defaultView;return i&&i.opener||(i=e),i.getComputedStyle(t)},bt=new RegExp(Ze.join("|"),"i");(function(){function t(){if(s){n.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",s.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",et.appendChild(n).appendChild(s);var t=e.getComputedStyle(s);a="1%"!==t.top,p=12===i(t.marginLeft),s.style.right="60%",l=36===i(t.right),r=36===i(t.width),s.style.position="absolute",d=12===i(s.offsetWidth/3),et.removeChild(n),s=null}}function i(e){return o(parseFloat(e))}var n=ue.createElement("div"),s=ue.createElement("div"),a,r,d,l,p;s.style&&(s.style.backgroundClip="content-box",s.cloneNode(!0).style.backgroundClip="",Te.clearCloneStyle="content-box"===s.style.backgroundClip,je.extend(Te,{boxSizingReliable:function(){return t(),r},pixelBoxStyles:function(){return t(),l},pixelPosition:function(){return t(),a},reliableMarginLeft:function(){return t(),p},scrollboxSize:function(){return t(),d}}))})();var wt=["Webkit","Moz","ms"],kt=ue.createElement("div").style,Tt={},St=/^(none|table(?!-c[ea]).+)/,Ct=/^--/,$t={position:"absolute",visibility:"hidden",display:"block"},At={letterSpacing:"0",fontWeight:"400"};je.extend({cssHooks:{opacity:{get:function(e,t){if(t){var i=R(e,"opacity");return""===i?"1":i}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,i,o){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var n=x(t),s=Ct.test(t),a=e.style,r,d,l;if(s||(t=U(n)),l=je.cssHooks[t]||je.cssHooks[n],void 0!==i){if(d=typeof i,"string"===d&&(r=Je.exec(i))&&r[1]&&(i=k(e,t,r),d="number"),null==i||i!==i)return;"number"!==d||s||(i+=r&&r[3]||(je.cssNumber[n]?"":"px")),Te.clearCloneStyle||""!==i||0!==t.indexOf("background")||(a[t]="inherit"),l&&"set"in l&&void 0===(i=l.set(e,i,o))||(s?a.setProperty(t,i):a[t]=i)}else return l&&"get"in l&&void 0!==(r=l.get(e,!1,o))?r:a[t]}},css:function(e,t,i,o){var n=x(t),s=Ct.test(t),a,r,d;return s||(t=U(n)),d=je.cssHooks[t]||je.cssHooks[n],d&&"get"in d&&(a=d.get(e,!0,i)),void 0===a&&(a=R(e,t,o)),"normal"===a&&t in At&&(a=At[t]),""===i||i?(r=parseFloat(a),!0===i||isFinite(r)?r||0:a):a}}),je.each(["height","width"],function(e,t){je.cssHooks[t]={get:function(e,i,o){if(i)return!St.test(je.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?Y(e,t,o):nt(e,$t,function(){return Y(e,t,o)})},set:function(e,i,o){var s=vt(e),a=!Te.scrollboxSize()&&"absolute"===s.position,r=(a||o)&&"border-box"===je.css(e,"boxSizing",!1,s),d=o?_(e,t,o,r,s):0,l;return r&&a&&(d-=n(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(s[t])-_(e,t,"border",!1,s)-.5)),d&&(l=Je.exec(i))&&"px"!==(l[3]||"px")&&(e.style[t]=i,i=je.css(e,t)),X(e,i,d)}}}),je.cssHooks.marginLeft=B(Te.reliableMarginLeft,function(e,t){if(t)return(parseFloat(R(e,"marginLeft"))||e.getBoundingClientRect().left-nt(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),je.each({margin:"",padding:"",border:"Width"},function(e,t){je.cssHooks[e+t]={expand:function(o){for(var n=0,s={},a="string"==typeof o?o.split(" "):[o];4>n;n++)s[e+Ze[n]+t]=a[n]||a[n-2]||a[0];return s}},"margin"!==e&&(je.cssHooks[e+t].set=X)}),je.fn.extend({css:function(e,t){return Fe(this,function(e,t,o){var n={},s=0,a,r;if(Array.isArray(t)){for(a=vt(e),r=t.length;s<r;s++)n[t[s]]=je.css(e,t[s],!1,a);return n}return void 0===o?je.css(e,t):je.style(e,t,o)},e,t,1<arguments.length)}}),je.Tween=V,V.prototype={constructor:V,init:function(e,t,i,o,n,s){this.elem=e,this.prop=i,this.easing=n||je.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=o,this.unit=s||(je.cssNumber[i]?"":"px")},cur:function(){var e=V.propHooks[this.prop];return e&&e.get?e.get(this):V.propHooks._default.get(this)},run:function(e){var t=V.propHooks[this.prop],i;return this.pos=this.options.duration?i=je.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):i=e,this.now=(this.end-this.start)*i+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),t&&t.set?t.set(this):V.propHooks._default.set(this),this}},V.prototype.init.prototype=V.prototype,V.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=je.css(e.elem,e.prop,""),t&&"auto"!==t?t:0)},set:function(e){je.fx.step[e.prop]?je.fx.step[e.prop](e):1===e.elem.nodeType&&(je.cssHooks[e.prop]||null!=e.elem.style[U(e.prop)])?je.style(e.elem,e.prop,e.now+e.unit):e.elem[e.prop]=e.now}}},V.propHooks.scrollTop=V.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},je.easing={linear:function(e){return e},swing:function(e){var t=Math.cos;return .5-t(e*i)/2},_default:"swing"},je.fx=V.prototype.init,je.fx.step={};var jt=/^(?:toggle|show|hide)$/,Et=/queueHooks$/,Dt,Nt;je.Animation=je.extend(te,{tweeners:{"*":[function(e,t){var i=this.createTween(e,t);return k(i.elem,e,Je.exec(t),i),i}]},tweener:function(e,t){Se(e)?(t=e,e=["*"]):e=e.match(Me);for(var i=0,o=e.length,n;i<o;i++)n=e[i],te.tweeners[n]=te.tweeners[n]||[],te.tweeners[n].unshift(t)},prefilters:[Z],prefilter:function(e,t){t?te.prefilters.unshift(e):te.prefilters.push(e)}}),je.speed=function(e,t,i){var o=e&&"object"==typeof e?je.extend({},e):{complete:i||!i&&t||Se(e)&&e,duration:e,easing:i&&t||t&&!Se(t)&&t};return je.fx.off?o.duration=0:"number"!=typeof o.duration&&(o.duration in je.fx.speeds?o.duration=je.fx.speeds[o.duration]:o.duration=je.fx.speeds._default),(null==o.queue||!0===o.queue)&&(o.queue="fx"),o.old=o.complete,o.complete=function(){Se(o.old)&&o.old.call(this),o.queue&&je.dequeue(this,o.queue)},o},je.fn.extend({fadeTo:function(e,t,i,o){return this.filter(ot).css("opacity",0).show().end().animate({opacity:t},e,i,o)},animate:function(e,t,i,o){var n=je.isEmptyObject(e),s=je.speed(t,i,o),a=function(){var t=te(this,je.extend({},e),s);(n||Ye.get(this,"finish"))&&t.stop(!0)};return a.finish=a,n||!1===s.queue?this.each(a):this.queue(s.queue,a)},stop:function(e,t,i){var o=function(e){var t=e.stop;delete e.stop,t(i)};return"string"!=typeof e&&(i=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,n=null!=e&&e+"queueHooks",s=je.timers,a=Ye.get(this);if(n)a[n]&&a[n].stop&&o(a[n]);else for(n in a)a[n]&&a[n].stop&&Et.test(n)&&o(a[n]);for(n=s.length;n--;)s[n].elem===this&&(null==e||s[n].queue===e)&&(s[n].anim.stop(i),t=!1,s.splice(n,1));(t||!i)&&je.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t=Ye.get(this),i=t[e+"queue"],o=t[e+"queueHooks"],n=je.timers,s=i?i.length:0,a;for(t.finish=!0,je.queue(this,e,[]),o&&o.stop&&o.stop.call(this,!0),a=n.length;a--;)n[a].elem===this&&n[a].queue===e&&(n[a].anim.stop(!0),n.splice(a,1));for(a=0;a<s;a++)i[a]&&i[a].finish&&i[a].finish.call(this);delete t.finish})}}),je.each(["toggle","show","hide"],function(e,t){var i=je.fn[t];je.fn[t]=function(e,o,n){return null==e||"boolean"==typeof e?i.apply(this,arguments):this.animate(K(t,!0),e,o,n)}}),je.each({slideDown:K("show"),slideUp:K("hide"),slideToggle:K("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){je.fn[e]=function(e,i,o){return this.animate(t,e,i,o)}}),je.timers=[],je.fx.tick=function(){var e=0,t=je.timers,o;for(Dt=Date.now();e<t.length;e++)o=t[e],o()||t[e]!==o||t.splice(e--,1);t.length||je.fx.stop(),Dt=void 0},je.fx.timer=function(e){je.timers.push(e),je.fx.start()},je.fx.interval=13,je.fx.start=function(){Nt||(Nt=!0,G())},je.fx.stop=function(){Nt=null},je.fx.speeds={slow:600,fast:200,_default:400},je.fn.delay=function(t,i){return t=je.fx?je.fx.speeds[t]||t:t,i=i||"fx",this.queue(i,function(i,o){var n=e.setTimeout(i,t);o.stop=function(){e.clearTimeout(n)}})},function(){var e=ue.createElement("input"),t=ue.createElement("select"),i=t.appendChild(ue.createElement("option"));e.type="checkbox",Te.checkOn=""!==e.value,Te.optSelected=i.selected,e=ue.createElement("input"),e.value="t",e.type="radio",Te.radioValue="t"===e.value}();var Lt=je.expr.attrHandle,Ht;je.fn.extend({attr:function(e,t){return Fe(this,je.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){je.removeAttr(this,e)})}}),je.extend({attr:function(e,t,i){var o=e.nodeType,n,s;if(3!==o&&8!==o&&2!==o)return"undefined"==typeof e.getAttribute?je.prop(e,t,i):(1===o&&je.isXMLDoc(e)||(s=je.attrHooks[t.toLowerCase()]||(je.expr.match.bool.test(t)?Ht:void 0)),void 0!==i)?null===i?void je.removeAttr(e,t):s&&"set"in s&&void 0!==(n=s.set(e,i,t))?n:(e.setAttribute(t,i+""),i):s&&"get"in s&&null!==(n=s.get(e,t))?n:(n=je.find.attr(e,t),null==n?void 0:n)},attrHooks:{type:{set:function(e,t){if(!Te.radioValue&&"radio"===t&&l(e,"input")){var i=e.value;return e.setAttribute("type",t),i&&(e.value=i),t}}}},removeAttr:function(e,t){var o=0,n=t&&t.match(Me),s;if(n&&1===e.nodeType)for(;s=n[o++];)e.removeAttribute(s)}}),Ht={set:function(e,t,i){return!1===t?je.removeAttr(e,i):e.setAttribute(i,i),i}},je.each(je.expr.match.bool.source.match(/\w+/g),function(e,t){var i=Lt[t]||je.find.attr;Lt[t]=function(e,t,o){var n=t.toLowerCase(),s,a;return o||(a=Lt[n],Lt[n]=s,s=null==i(e,t,o)?null:n,Lt[n]=a),s}});var Ot=/^(?:input|select|textarea|button)$/i,Pt=/^(?:a|area)$/i;je.fn.extend({prop:function(e,t){return Fe(this,je.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[je.propFix[e]||e]})}}),je.extend({prop:function(e,t,i){var o=e.nodeType,n,s;if(3!==o&&8!==o&&2!==o)return 1===o&&je.isXMLDoc(e)||(t=je.propFix[t]||t,s=je.propHooks[t]),void 0===i?s&&"get"in s&&null!==(n=s.get(e,t))?n:e[t]:s&&"set"in s&&void 0!==(n=s.set(e,i,t))?n:e[t]=i},propHooks:{tabIndex:{get:function(e){var t=je.find.attr(e,"tabindex");return t?parseInt(t,10):Ot.test(e.nodeName)||Pt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),Te.optSelected||(je.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),je.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){je.propFix[this.toLowerCase()]=this}),je.fn.extend({addClass:function(e){var t=0,o,n,s,a,r,d,l;if(Se(e))return this.each(function(t){je(this).addClass(e.call(this,t,oe(this)))});if(o=ne(e),o.length)for(;n=this[t++];)if(a=oe(n),s=1===n.nodeType&&" "+ie(a)+" ",s){for(d=0;r=o[d++];)0>s.indexOf(" "+r+" ")&&(s+=r+" ");l=ie(s),a!==l&&n.setAttribute("class",l)}return this},removeClass:function(e){var t=0,o,n,s,a,r,d,l;if(Se(e))return this.each(function(t){je(this).removeClass(e.call(this,t,oe(this)))});if(!arguments.length)return this.attr("class","");if(o=ne(e),o.length)for(;n=this[t++];)if(a=oe(n),s=1===n.nodeType&&" "+ie(a)+" ",s){for(d=0;r=o[d++];)for(;-1<s.indexOf(" "+r+" ");)s=s.replace(" "+r+" "," ");l=ie(s),a!==l&&n.setAttribute("class",l)}return this},toggleClass:function(e,t){var o=typeof e,n="string"==o||Array.isArray(e);return"boolean"==typeof t&&n?t?this.addClass(e):this.removeClass(e):Se(e)?this.each(function(o){je(this).toggleClass(e.call(this,o,oe(this),t),t)}):this.each(function(){var t,s,a,r;if(n)for(s=0,a=je(this),r=ne(e);t=r[s++];)a.hasClass(t)?a.removeClass(t):a.addClass(t);else(void 0===e||"boolean"===o)&&(t=oe(this),t&&Ye.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":Ye.get(this,"__className__")||""))})},hasClass:function(e){var t=0,o,n;for(o=" "+e+" ";n=this[t++];)if(1===n.nodeType&&-1<(" "+ie(oe(n))+" ").indexOf(o))return!0;return!1}});var qt=/\r/g;je.fn.extend({val:function(e){var t=this[0],o,n,s;return arguments.length?(s=Se(e),this.each(function(t){var i;1!==this.nodeType||(i=s?e.call(this,t,je(this).val()):e,null==i?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=je.map(i,function(e){return null==e?"":e+""})),o=je.valHooks[this.type]||je.valHooks[this.nodeName.toLowerCase()],(!o||!("set"in o)||void 0===o.set(this,i,"value"))&&(this.value=i))})):t?(o=je.valHooks[t.type]||je.valHooks[t.nodeName.toLowerCase()],o&&"get"in o&&void 0!==(n=o.get(t,"value")))?n:(n=t.value,"string"==typeof n?n.replace(qt,""):null==n?"":n):void 0}}),je.extend({valHooks:{option:{get:function(e){var t=je.find.attr(e,"value");return null==t?ie(je.text(e)):t}},select:{get:function(e){var t=e.options,o=e.selectedIndex,n="select-one"===e.type,s=n?null:[],a=n?o+1:t.length,r,d,p;for(p=0>o?a:n?o:0;p<a;p++)if(d=t[p],(d.selected||p===o)&&!d.disabled&&(!d.parentNode.disabled||!l(d.parentNode,"optgroup"))){if(r=je(d).val(),n)return r;s.push(r)}return s},set:function(e,t){for(var o=e.options,n=je.makeArray(t),s=o.length,a,r;s--;)r=o[s],(r.selected=-1<je.inArray(je.valHooks.option.get(r),n))&&(a=!0);return a||(e.selectedIndex=-1),n}}}}),je.each(["radio","checkbox"],function(){je.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<je.inArray(je(e).val(),t)}},Te.checkOn||(je.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),Te.focusin="onfocusin"in e;var It=/^(?:focusinfocus|focusoutblur)$/,zt=function(t){t.stopPropagation()};je.extend(je.event,{trigger:function(t,o,n,s){var a=[n||ue],r=be.call(t,"type")?t.type:t,d=be.call(t,"namespace")?t.namespace.split("."):[],l,p,c,u,h,f,g,m;if((p=m=c=n=n||ue,3!==n.nodeType&&8!==n.nodeType)&&!It.test(r+je.event.triggered)&&(-1<r.indexOf(".")&&(d=r.split("."),r=d.shift(),d.sort()),h=0>r.indexOf(":")&&"on"+r,t=t[je.expando]?t:new je.Event(r,"object"==typeof t&&t),t.isTrigger=s?2:3,t.namespace=d.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=n),o=null==o?[t]:je.makeArray(o,[t]),g=je.event.special[r]||{},s||!g.trigger||!1!==g.trigger.apply(n,o))){if(!s&&!g.noBubble&&!Ce(n)){for(u=g.delegateType||r,It.test(u+r)||(p=p.parentNode);p;p=p.parentNode)a.push(p),c=p;c===(n.ownerDocument||ue)&&a.push(c.defaultView||c.parentWindow||e)}for(l=0;(p=a[l++])&&!t.isPropagationStopped();)m=p,t.type=1<l?u:g.bindType||r,f=(Ye.get(p,"events")||{})[t.type]&&Ye.get(p,"handle"),f&&f.apply(p,o),f=h&&p[h],f&&f.apply&&_e(p)&&(t.result=f.apply(p,o),!1===t.result&&t.preventDefault());return t.type=r,s||t.isDefaultPrevented()||g._default&&!1!==g._default.apply(a.pop(),o)||!_e(n)||!h||!Se(n[r])||Ce(n)||(c=n[h],c&&(n[h]=null),je.event.triggered=r,t.isPropagationStopped()&&m.addEventListener(r,zt),n[r](),t.isPropagationStopped()&&m.removeEventListener(r,zt),je.event.triggered=void 0,c&&(n[h]=c)),t.result}},simulate:function(t,i,o){var n=je.extend(new je.Event,o,{type:t,isSimulated:!0});je.event.trigger(n,null,i)}}),je.fn.extend({trigger:function(e,t){return this.each(function(){je.event.trigger(e,t,this)})},triggerHandler:function(e,t){var i=this[0];if(i)return je.event.trigger(e,t,i,!0)}}),Te.focusin||je.each({focus:"focusin",blur:"focusout"},function(e,t){var i=function(e){je.event.simulate(t,e.target,je.event.fix(e))};je.event.special[t]={setup:function(){var o=this.ownerDocument||this,n=Ye.access(o,t);n||o.addEventListener(e,i,!0),Ye.access(o,t,(n||0)+1)},teardown:function(){var o=this.ownerDocument||this,n=Ye.access(o,t)-1;n?Ye.access(o,t,n):(o.removeEventListener(e,i,!0),Ye.remove(o,t))}}});var Wt=e.location,Mt=Date.now(),Rt=/\?/;je.parseXML=function(t){var i;if(!t||"string"!=typeof t)return null;try{i=new e.DOMParser().parseFromString(t,"text/xml")}catch(t){i=void 0}return(!i||i.getElementsByTagName("parsererror").length)&&je.error("Invalid XML: "+t),i};var Bt=/\[\]$/,Ft=/\r?\n/g,Ut=/^(?:submit|button|image|reset|file)$/i,Xt=/^(?:input|select|textarea|keygen)/i;je.param=function(e,t){var i=[],o=function(e,t){var o=Se(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==o?"":o)},n;if(null==e)return"";if(Array.isArray(e)||e.jquery&&!je.isPlainObject(e))je.each(e,function(){o(this.name,this.value)});else for(n in e)se(n,e[n],t,o);return i.join("&")},je.fn.extend({serialize:function(){return je.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=je.prop(this,"elements");return e?je.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!je(this).is(":disabled")&&Xt.test(this.nodeName)&&!Ut.test(e)&&(this.checked||!at.test(e))}).map(function(e,t){var i=je(this).val();return null==i?null:Array.isArray(i)?je.map(i,function(e){return{name:t.name,value:e.replace(Ft,"\r\n")}}):{name:t.name,value:i.replace(Ft,"\r\n")}}).get()}});var _t=/%20/g,Yt=/#.*$/,Vt=/([?&])_=[^&]*/,Gt=/^(.*?):[ \t]*([^\r\n]*)$/mg,Qt=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Kt=/^(?:GET|HEAD)$/,Jt=/^\/\//,Zt={},ei={},ti="*/".concat("*"),ii=ue.createElement("a");ii.href=Wt.href,je.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Wt.href,type:"GET",isLocal:Qt.test(Wt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":"*/*",text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":je.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?de(de(e,je.ajaxSettings),t):de(je.ajaxSettings,e)},ajaxPrefilter:ae(Zt),ajaxTransport:ae(ei),ajax:function(t,o){function n(t,i,o,n){var c=i,u,h,x,b,T;w||(w=!0,v&&e.clearTimeout(v),g=void 0,y=n||"",f.readyState=0<t?4:0,u=200<=t&&300>t||304===t,o&&(b=le(a,f,o)),b=pe(a,b,f,u),u?(a.ifModified&&(T=f.getResponseHeader("Last-Modified"),T&&(je.lastModified[m]=T),T=f.getResponseHeader("etag"),T&&(je.etag[m]=T)),204===t||"HEAD"===a.type?c="nocontent":304===t?c="notmodified":(c=b.state,h=b.data,x=b.error,u=!x)):(x=c,(t||!c)&&(c="error",0>t&&(t=0))),f.status=t,f.statusText=(i||c)+"",u?d.resolveWith(s,[h,c,f]):d.rejectWith(s,[f,c,x]),f.statusCode(p),p=void 0,k&&r.trigger(u?"ajaxSuccess":"ajaxError",[f,a,u?h:x]),l.fireWith(s,[f,c]),k&&(r.trigger("ajaxComplete",[f,a]),! --je.active&&je.event.trigger("ajaxStop")))}"object"==typeof t&&(o=t,t=void 0),o=o||{};var a=je.ajaxSetup({},o),s=a.context||a,r=a.context&&(s.nodeType||s.jquery)?je(s):je.event,d=je.Deferred(),l=je.Callbacks("once memory"),p=a.statusCode||{},c={},u={},h="canceled",f={readyState:0,getResponseHeader:function(e){var t;if(w){if(!x)for(x={};t=Gt.exec(y);)x[t[1].toLowerCase()+" "]=(x[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=x[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return w?y:null},setRequestHeader:function(e,t){return null==w&&(e=u[e.toLowerCase()]=u[e.toLowerCase()]||e,c[e]=t),this},overrideMimeType:function(e){return null==w&&(a.mimeType=e),this},statusCode:function(e){if(e)if(w)f.always(e[f.status]);else for(var t in e)p[t]=[p[t],e[t]];return this},abort:function(e){var t=e||h;return g&&g.abort(t),n(0,t),this}},g,m,y,x,v,b,w,k,T,S;if(d.promise(f),a.url=((t||a.url||Wt.href)+"").replace(Jt,Wt.protocol+"//"),a.type=o.method||o.type||a.method||a.type,a.dataTypes=(a.dataType||"*").toLowerCase().match(Me)||[""],null==a.crossDomain){b=ue.createElement("a");try{b.href=a.url,b.href=b.href,a.crossDomain=ii.protocol+"//"+ii.host!=b.protocol+"//"+b.host}catch(t){a.crossDomain=!0}}if(a.data&&a.processData&&"string"!=typeof a.data&&(a.data=je.param(a.data,a.traditional)),re(Zt,a,o,f),w)return f;for(T in k=je.event&&a.global,k&&0==je.active++&&je.event.trigger("ajaxStart"),a.type=a.type.toUpperCase(),a.hasContent=!Kt.test(a.type),m=a.url.replace(Yt,""),a.hasContent?a.data&&a.processData&&0===(a.contentType||"").indexOf("application/x-www-form-urlencoded")&&(a.data=a.data.replace(_t,"+")):(S=a.url.slice(m.length),a.data&&(a.processData||"string"==typeof a.data)&&(m+=(Rt.test(m)?"&":"?")+a.data,delete a.data),!1===a.cache&&(m=m.replace(Vt,"$1"),S=(Rt.test(m)?"&":"?")+"_="+Mt++ +S),a.url=m+S),a.ifModified&&(je.lastModified[m]&&f.setRequestHeader("If-Modified-Since",je.lastModified[m]),je.etag[m]&&f.setRequestHeader("If-None-Match",je.etag[m])),(a.data&&a.hasContent&&!1!==a.contentType||o.contentType)&&f.setRequestHeader("Content-Type",a.contentType),f.setRequestHeader("Accept",a.dataTypes[0]&&a.accepts[a.dataTypes[0]]?a.accepts[a.dataTypes[0]]+("*"===a.dataTypes[0]?"":", */*; q=0.01"):a.accepts["*"]),a.headers)f.setRequestHeader(T,a.headers[T]);if(a.beforeSend&&(!1===a.beforeSend.call(s,f,a)||w))return f.abort();if(h="abort",l.add(a.complete),f.done(a.success),f.fail(a.error),g=re(ei,a,o,f),!g)n(-1,"No Transport");else{if(f.readyState=1,k&&r.trigger("ajaxSend",[f,a]),w)return f;a.async&&0<a.timeout&&(v=e.setTimeout(function(){f.abort("timeout")},a.timeout));try{w=!1,g.send(c,n)}catch(t){if(w)throw t;n(-1,t)}}return f},getJSON:function(e,t,i){return je.get(e,t,i,"json")},getScript:function(e,t){return je.get(e,void 0,t,"script")}}),je.each(["get","post"],function(e,t){je[t]=function(e,i,o,n){return Se(i)&&(n=n||o,o=i,i=void 0),je.ajax(je.extend({url:e,type:t,dataType:n,data:i,success:o},je.isPlainObject(e)&&e))}}),je._evalUrl=function(e,t){return je.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){je.globalEval(e,t)}})},je.fn.extend({wrapAll:function(e){var t;return this[0]&&(Se(e)&&(e=e.call(this[0])),t=je(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return Se(e)?this.each(function(t){je(this).wrapInner(e.call(this,t))}):this.each(function(){var t=je(this),i=t.contents();i.length?i.wrapAll(e):t.append(e)})},wrap:function(e){var t=Se(e);return this.each(function(o){je(this).wrapAll(t?e.call(this,o):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){je(this).replaceWith(this.childNodes)}),this}}),je.expr.pseudos.hidden=function(e){return!je.expr.pseudos.visible(e)},je.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},je.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(t){}};var oi={0:200,1223:204},ni=je.ajaxSettings.xhr();Te.cors=!!ni&&"withCredentials"in ni,Te.ajax=ni=!!ni,je.ajaxTransport(function(t){var o,n;if(Te.cors||ni&&!t.crossDomain)return{send:function(s,a){var r=t.xhr(),d;if(r.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(d in t.xhrFields)r[d]=t.xhrFields[d];for(d in t.mimeType&&r.overrideMimeType&&r.overrideMimeType(t.mimeType),t.crossDomain||s["X-Requested-With"]||(s["X-Requested-With"]="XMLHttpRequest"),s)r.setRequestHeader(d,s[d]);o=function(e){return function(){o&&(o=n=r.onload=r.onerror=r.onabort=r.ontimeout=r.onreadystatechange=null,"abort"===e?r.abort():"error"===e?"number"==typeof r.status?a(r.status,r.statusText):a(0,"error"):a(oi[r.status]||r.status,r.statusText,"text"!==(r.responseType||"text")||"string"!=typeof r.responseText?{binary:r.response}:{text:r.responseText},r.getAllResponseHeaders()))}},r.onload=o(),n=r.onerror=r.ontimeout=o("error"),void 0===r.onabort?r.onreadystatechange=function(){4===r.readyState&&e.setTimeout(function(){o&&n()})}:r.onabort=n,o=o("abort");try{r.send(t.hasContent&&t.data||null)}catch(t){if(o)throw t}},abort:function(){o&&o()}}}),je.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),je.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return je.globalEval(e),e}}}),je.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),je.ajaxTransport("script",function(e){if(e.crossDomain||e.scriptAttrs){var t,i;return{send:function(o,n){t=je("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",i=function(e){t.remove(),i=null,e&&n("error"===e.type?404:200,e.type)}),ue.head.appendChild(t[0])},abort:function(){i&&i()}}}});var si=[],ai=/(=)\?(?=&|$)|\?\?/;je.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=si.pop()||je.expando+"_"+Mt++;return this[e]=!0,e}}),je.ajaxPrefilter("json jsonp",function(t,i,o){var n=!1!==t.jsonp&&(ai.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&ai.test(t.data)&&"data"),s,a,r;if(n||"jsonp"===t.dataTypes[0])return s=t.jsonpCallback=Se(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,n?t[n]=t[n].replace(ai,"$1"+s):!1!==t.jsonp&&(t.url+=(Rt.test(t.url)?"&":"?")+t.jsonp+"="+s),t.converters["script json"]=function(){return r||je.error(s+" was not called"),r[0]},t.dataTypes[0]="json",a=e[s],e[s]=function(){r=arguments},o.always(function(){void 0===a?je(e).removeProp(s):e[s]=a,t[s]&&(t.jsonpCallback=i.jsonpCallback,si.push(s)),r&&Se(a)&&a(r[0]),r=a=void 0}),"script"}),Te.createHTMLDocument=function(){var e=ue.implementation.createHTMLDocument("").body;return e.innerHTML="<form></form><form></form>",2===e.childNodes.length}(),je.parseHTML=function(e,t,i){if("string"!=typeof e)return[];"boolean"==typeof t&&(i=t,t=!1);var o,n,s;return(t||(Te.createHTMLDocument?(t=ue.implementation.createHTMLDocument(""),o=t.createElement("base"),o.href=ue.location.href,t.head.appendChild(o)):t=ue),n=Oe.exec(e),s=!i&&[],n)?[t.createElement(n[1])]:(n=A([e],t,s),s&&s.length&&je(s).remove(),je.merge([],n.childNodes))},je.fn.load=function(e,t,i){var o=this,n=e.indexOf(" "),s,a,r;return-1<n&&(s=ie(e.slice(n)),e=e.slice(0,n)),Se(t)?(i=t,t=void 0):t&&"object"==typeof t&&(a="POST"),0<o.length&&je.ajax({url:e,type:a||"GET",dataType:"html",data:t}).done(function(e){r=arguments,o.html(s?je("<div>").append(je.parseHTML(e)).find(s):e)}).always(i&&function(e,t){o.each(function(){i.apply(this,r||[e.responseText,t,e])})}),this},je.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){je.fn[t]=function(e){return this.on(t,e)}}),je.expr.pseudos.animated=function(e){return je.grep(je.timers,function(t){return e===t.elem}).length},je.offset={setOffset:function(e,t,o){var i=je.css(e,"position"),n=je(e),s={},a,r,d,l,p,c,u;"static"===i&&(e.style.position="relative"),p=n.offset(),d=je.css(e,"top"),c=je.css(e,"left"),u=("absolute"===i||"fixed"===i)&&-1<(d+c).indexOf("auto"),u?(a=n.position(),l=a.top,r=a.left):(l=parseFloat(d)||0,r=parseFloat(c)||0),Se(t)&&(t=t.call(e,o,je.extend({},p))),null!=t.top&&(s.top=t.top-p.top+l),null!=t.left&&(s.left=t.left-p.left+r),"using"in t?t.using.call(e,s):n.css(s)}},je.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){je.offset.setOffset(this,e,t)});var t=this[0],i,o;if(t)return t.getClientRects().length?(i=t.getBoundingClientRect(),o=t.ownerDocument.defaultView,{top:i.top+o.pageYOffset,left:i.left+o.pageXOffset}):{top:0,left:0}},position:function(){if(this[0]){var e=this[0],t={top:0,left:0},i,o,n;if("fixed"===je.css(e,"position"))o=e.getBoundingClientRect();else{for(o=this.offset(),n=e.ownerDocument,i=e.offsetParent||n.documentElement;i&&(i===n.body||i===n.documentElement)&&"static"===je.css(i,"position");)i=i.parentNode;i&&i!==e&&1===i.nodeType&&(t=je(i).offset(),t.top+=je.css(i,"borderTopWidth",!0),t.left+=je.css(i,"borderLeftWidth",!0))}return{top:o.top-t.top-je.css(e,"marginTop",!0),left:o.left-t.left-je.css(e,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===je.css(e,"position");)e=e.offsetParent;return e||et})}}),je.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var i="pageYOffset"===t;je.fn[e]=function(o){return Fe(this,function(e,o,n){var s;return Ce(e)?s=e:9===e.nodeType&&(s=e.defaultView),void 0===n?s?s[t]:e[o]:void(s?s.scrollTo(i?s.pageXOffset:n,i?n:s.pageYOffset):e[o]=n)},e,o,arguments.length)}}),je.each(["top","left"],function(e,t){je.cssHooks[t]=B(Te.pixelPosition,function(e,i){if(i)return i=R(e,t),xt.test(i)?je(e).position()[t]+"px":i})}),je.each({Height:"height",Width:"width"},function(e,t){je.each({padding:"inner"+e,content:t,"":"outer"+e},function(i,o){je.fn[o]=function(n,a){var r=arguments.length&&(i||"boolean"!=typeof n),d=i||(!0===n||!0===a?"margin":"border");return Fe(this,function(t,i,n){var a;return Ce(t)?0===o.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(a=t.documentElement,s(t.body["scroll"+e],a["scroll"+e],t.body["offset"+e],a["offset"+e],a["client"+e])):void 0===n?je.css(t,i,d):je.style(t,i,n,d)},t,r?n:void 0,r)}})}),je.each(["blur","focus","focusin","focusout","resize","scroll","click","dblclick","mousedown","mouseup","mousemove","mouseover","mouseout","mouseenter","mouseleave","change","select","submit","keydown","keypress","keyup","contextmenu"],function(e,t){je.fn[t]=function(e,i){return 0<arguments.length?this.on(t,null,e,i):this.trigger(t)}}),je.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),je.fn.extend({bind:function(e,t,i){return this.on(e,null,t,i)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,i,o){return this.on(t,e,i,o)},undelegate:function(e,t,i){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",i)}}),je.proxy=function(e,t){var i,o,n;if("string"==typeof t&&(i=e[t],t=e,e=i),!!Se(e))return o=fe.call(arguments,2),n=function(){return e.apply(t||this,o.concat(fe.call(arguments)))},n.guid=e.guid=e.guid||je.guid++,n},je.holdReady=function(e){e?je.readyWait++:je.ready(!0)},je.isArray=Array.isArray,je.parseJSON=JSON.parse,je.nodeName=l,je.isFunction=Se,je.isWindow=Ce,je.camelCase=x,je.type=r,je.now=Date.now,je.isNumeric=function(e){var t=je.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},"function"==typeof define&&define.amd&&define("jquery",[],function(){return je});var ri=e.jQuery,di=e.$;return je.noConflict=function(t){return e.$===je&&(e.$=di),t&&e.jQuery===je&&(e.jQuery=ri),je},t||(e.jQuery=e.$=je),je})},{}],3:[function(e,t,i){var o=Math.PI,n=Math.round,s=Math.ceil,a=Math.max;(function(o){'use strict';"function"==typeof define&&define.amd?define(["jquery"],o):"undefined"==typeof i?o(jQuery):t.exports=o(e("jquery"))})(function(e){'use strict';var t=Math.abs,i=Math.floor,r=window.Slick||{};r=function(){function t(t,o){var n=this,s;n.defaults={accessibility:!0,adaptiveHeight:!1,appendArrows:e(t),appendDots:e(t),arrows:!0,asNavFor:null,prevArrow:"<button class=\"slick-prev\" aria-label=\"Previous\" type=\"button\">Previous</button>",nextArrow:"<button class=\"slick-next\" aria-label=\"Next\" type=\"button\">Next</button>",autoplay:!1,autoplaySpeed:3e3,centerMode:!1,centerPadding:"50px",cssEase:"ease",customPaging:function(t,o){return e("<button type=\"button\" />").text(o+1)},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,focusOnChange:!1,infinite:!0,initialSlide:0,lazyLoad:"ondemand",mobileFirst:!1,pauseOnHover:!0,pauseOnFocus:!0,pauseOnDotsHover:!1,respondTo:"window",responsive:null,rows:1,rtl:!1,slide:"",slidesPerRow:1,slidesToShow:1,slidesToScroll:1,speed:500,swipe:!0,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!0,variableWidth:!1,vertical:!1,verticalSwiping:!1,waitForAnimate:!0,zIndex:1e3},n.initials={animating:!1,dragging:!1,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,$dots:null,listWidth:null,listHeight:null,loadIndex:0,$nextArrow:null,$prevArrow:null,scrolling:!1,slideCount:null,slideWidth:null,$slideTrack:null,$slides:null,sliding:!1,slideOffset:0,swipeLeft:null,swiping:!1,$list:null,touchObject:{},transformsEnabled:!1,unslicked:!1},e.extend(n,n.initials),n.activeBreakpoint=null,n.animType=null,n.animProp=null,n.breakpoints=[],n.breakpointSettings=[],n.cssTransitions=!1,n.focussed=!1,n.interrupted=!1,n.hidden="hidden",n.paused=!0,n.positionProp=null,n.respondTo=null,n.rowCount=1,n.shouldClick=!0,n.$slider=e(t),n.$slidesCache=null,n.transformType=null,n.transitionType=null,n.visibilityChange="visibilitychange",n.windowWidth=0,n.windowTimer=null,s=e(t).data("slick")||{},n.options=e.extend({},n.defaults,o,s),n.currentSlide=n.options.initialSlide,n.originalSettings=n.options,"undefined"==typeof document.mozHidden?"undefined"!=typeof document.webkitHidden&&(n.hidden="webkitHidden",n.visibilityChange="webkitvisibilitychange"):(n.hidden="mozHidden",n.visibilityChange="mozvisibilitychange"),n.autoPlay=e.proxy(n.autoPlay,n),n.autoPlayClear=e.proxy(n.autoPlayClear,n),n.autoPlayIterator=e.proxy(n.autoPlayIterator,n),n.changeSlide=e.proxy(n.changeSlide,n),n.clickHandler=e.proxy(n.clickHandler,n),n.selectHandler=e.proxy(n.selectHandler,n),n.setPosition=e.proxy(n.setPosition,n),n.swipeHandler=e.proxy(n.swipeHandler,n),n.dragHandler=e.proxy(n.dragHandler,n),n.keyHandler=e.proxy(n.keyHandler,n),n.instanceUid=i++,n.htmlExpr=/^(?:\s*(<[\w\W]+>)[^>]*)$/,n.registerBreakpoints(),n.init(!0)}var i=0;return t}(),r.prototype.activateADA=function(){var e=this;e.$slideTrack.find(".slick-active").attr({"aria-hidden":"false"}).find("a, input, button, select").attr({tabindex:"0"})},r.prototype.addSlide=r.prototype.slickAdd=function(t,i,o){var n=this;if("boolean"==typeof i)o=i,i=null;else if(0>i||i>=n.slideCount)return!1;n.unload(),"number"==typeof i?0===i&&0===n.$slides.length?e(t).appendTo(n.$slideTrack):o?e(t).insertBefore(n.$slides.eq(i)):e(t).insertAfter(n.$slides.eq(i)):!0===o?e(t).prependTo(n.$slideTrack):e(t).appendTo(n.$slideTrack),n.$slides=n.$slideTrack.children(this.options.slide),n.$slideTrack.children(this.options.slide).detach(),n.$slideTrack.append(n.$slides),n.$slides.each(function(t,i){e(i).attr("data-slick-index",t)}),n.$slidesCache=n.$slides,n.reinit()},r.prototype.animateHeight=function(){var e=this;if(1===e.options.slidesToShow&&!0===e.options.adaptiveHeight&&!1===e.options.vertical){var t=e.$slides.eq(e.currentSlide).outerHeight(!0);e.$list.animate({height:t},e.options.speed)}},r.prototype.animateSlide=function(t,i){var o={},n=this;n.animateHeight(),!0===n.options.rtl&&!1===n.options.vertical&&(t=-t),!1===n.transformsEnabled?!1===n.options.vertical?n.$slideTrack.animate({left:t},n.options.speed,n.options.easing,i):n.$slideTrack.animate({top:t},n.options.speed,n.options.easing,i):!1===n.cssTransitions?(!0===n.options.rtl&&(n.currentLeft=-n.currentLeft),e({animStart:n.currentLeft}).animate({animStart:t},{duration:n.options.speed,easing:n.options.easing,step:function(e){e=s(e),!1===n.options.vertical?(o[n.animType]="translate("+e+"px, 0px)",n.$slideTrack.css(o)):(o[n.animType]="translate(0px,"+e+"px)",n.$slideTrack.css(o))},complete:function(){i&&i.call()}})):(n.applyTransition(),t=s(t),o[n.animType]=!1===n.options.vertical?"translate3d("+t+"px, 0px, 0px)":"translate3d(0px,"+t+"px, 0px)",n.$slideTrack.css(o),i&&setTimeout(function(){n.disableTransition(),i.call()},n.options.speed))},r.prototype.getNavTarget=function(){var t=this,i=t.options.asNavFor;return i&&null!==i&&(i=e(i).not(t.$slider)),i},r.prototype.asNavFor=function(t){var i=this,o=i.getNavTarget();null!==o&&"object"==typeof o&&o.each(function(){var i=e(this).slick("getSlick");i.unslicked||i.slideHandler(t,!0)})},r.prototype.applyTransition=function(e){var t=this,i={};i[t.transitionType]=!1===t.options.fade?t.transformType+" "+t.options.speed+"ms "+t.options.cssEase:"opacity "+t.options.speed+"ms "+t.options.cssEase,!1===t.options.fade?t.$slideTrack.css(i):t.$slides.eq(e).css(i)},r.prototype.autoPlay=function(){var e=this;e.autoPlayClear(),e.slideCount>e.options.slidesToShow&&(e.autoPlayTimer=setInterval(e.autoPlayIterator,e.options.autoplaySpeed))},r.prototype.autoPlayClear=function(){var e=this;e.autoPlayTimer&&clearInterval(e.autoPlayTimer)},r.prototype.autoPlayIterator=function(){var e=this,t=e.currentSlide+e.options.slidesToScroll;e.paused||e.interrupted||e.focussed||(!1===e.options.infinite&&(1===e.direction&&e.currentSlide+1===e.slideCount-1?e.direction=0:0===e.direction&&(t=e.currentSlide-e.options.slidesToScroll,0==e.currentSlide-1&&(e.direction=1))),e.slideHandler(t))},r.prototype.buildArrows=function(){var t=this;!0===t.options.arrows&&(t.$prevArrow=e(t.options.prevArrow).addClass("slick-arrow"),t.$nextArrow=e(t.options.nextArrow).addClass("slick-arrow"),t.slideCount>t.options.slidesToShow?(t.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),t.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.prependTo(t.options.appendArrows),t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.appendTo(t.options.appendArrows),!0!==t.options.infinite&&t.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true")):t.$prevArrow.add(t.$nextArrow).addClass("slick-hidden").attr({"aria-disabled":"true",tabindex:"-1"}))},r.prototype.buildDots=function(){var t=this,o,n;if(!0===t.options.dots&&t.slideCount>t.options.slidesToShow){for(t.$slider.addClass("slick-dotted"),n=e("<ul />").addClass(t.options.dotsClass),o=0;o<=t.getDotCount();o+=1)n.append(e("<li />").append(t.options.customPaging.call(this,t,o)));t.$dots=n.appendTo(t.options.appendDots),t.$dots.find("li").first().addClass("slick-active")}},r.prototype.buildOut=function(){var t=this;t.$slides=t.$slider.children(t.options.slide+":not(.slick-cloned)").addClass("slick-slide"),t.slideCount=t.$slides.length,t.$slides.each(function(t,i){e(i).attr("data-slick-index",t).data("originalStyling",e(i).attr("style")||"")}),t.$slider.addClass("slick-slider"),t.$slideTrack=0===t.slideCount?e("<div class=\"slick-track\"/>").appendTo(t.$slider):t.$slides.wrapAll("<div class=\"slick-track\"/>").parent(),t.$list=t.$slideTrack.wrap("<div class=\"slick-list\"/>").parent(),t.$slideTrack.css("opacity",0),(!0===t.options.centerMode||!0===t.options.swipeToSlide)&&(t.options.slidesToScroll=1),e("img[data-lazy]",t.$slider).not("[src]").addClass("slick-loading"),t.setupInfinite(),t.buildArrows(),t.buildDots(),t.updateDots(),t.setSlideClasses("number"==typeof t.currentSlide?t.currentSlide:0),!0===t.options.draggable&&t.$list.addClass("draggable")},r.prototype.buildRows=function(){var e=this,t,i,o,n,r,d,l;if(n=document.createDocumentFragment(),d=e.$slider.children(),0<e.options.rows){for(l=e.options.slidesPerRow*e.options.rows,r=s(d.length/l),t=0;t<r;t++){var p=document.createElement("div");for(i=0;i<e.options.rows;i++){var u=document.createElement("div");for(o=0;o<e.options.slidesPerRow;o++){var h=t*l+(i*e.options.slidesPerRow+o);d.get(h)&&u.appendChild(d.get(h))}p.appendChild(u)}n.appendChild(p)}e.$slider.empty().append(n),e.$slider.children().children().children().css({width:100/e.options.slidesPerRow+"%",display:"inline-block"})}},r.prototype.checkResponsive=function(t,i){var o=Math.min,n=this,s=!1,a=n.$slider.width(),r=window.innerWidth||e(window).width(),d,l,p;if("window"===n.respondTo?p=r:"slider"===n.respondTo?p=a:"min"===n.respondTo&&(p=o(r,a)),n.options.responsive&&n.options.responsive.length&&null!==n.options.responsive){for(d in l=null,n.breakpoints)n.breakpoints.hasOwnProperty(d)&&(!1===n.originalSettings.mobileFirst?p<n.breakpoints[d]&&(l=n.breakpoints[d]):p>n.breakpoints[d]&&(l=n.breakpoints[d]));null===l?null!==n.activeBreakpoint&&(n.activeBreakpoint=null,n.options=n.originalSettings,!0===t&&(n.currentSlide=n.options.initialSlide),n.refresh(t),s=l):null===n.activeBreakpoint?(n.activeBreakpoint=l,"unslick"===n.breakpointSettings[l]?n.unslick(l):(n.options=e.extend({},n.originalSettings,n.breakpointSettings[l]),!0===t&&(n.currentSlide=n.options.initialSlide),n.refresh(t)),s=l):(l!==n.activeBreakpoint||i)&&(n.activeBreakpoint=l,"unslick"===n.breakpointSettings[l]?n.unslick(l):(n.options=e.extend({},n.originalSettings,n.breakpointSettings[l]),!0===t&&(n.currentSlide=n.options.initialSlide),n.refresh(t)),s=l),t||!1===s||n.$slider.trigger("breakpoint",[n,s])}},r.prototype.changeSlide=function(t,i){var o=this,n=e(t.currentTarget),s,a,r;switch(n.is("a")&&t.preventDefault(),n.is("li")||(n=n.closest("li")),r=0!=o.slideCount%o.options.slidesToScroll,s=r?0:(o.slideCount-o.currentSlide)%o.options.slidesToScroll,t.data.message){case"previous":a=0===s?o.options.slidesToScroll:o.options.slidesToShow-s,o.slideCount>o.options.slidesToShow&&o.slideHandler(o.currentSlide-a,!1,i);break;case"next":a=0===s?o.options.slidesToScroll:s,o.slideCount>o.options.slidesToShow&&o.slideHandler(o.currentSlide+a,!1,i);break;case"index":var d=0===t.data.index?0:t.data.index||n.index()*o.options.slidesToScroll;o.slideHandler(o.checkNavigable(d),!1,i),n.children().trigger("focus");break;default:}},r.prototype.checkNavigable=function(e){var t=this,i,o;if(i=t.getNavigableIndexes(),o=0,e>i[i.length-1])e=i[i.length-1];else for(var s in i){if(e<i[s]){e=o;break}o=i[s]}return e},r.prototype.cleanUpEvents=function(){var t=this;t.options.dots&&null!==t.$dots&&(e("li",t.$dots).off("click.slick",t.changeSlide).off("mouseenter.slick",e.proxy(t.interrupt,t,!0)).off("mouseleave.slick",e.proxy(t.interrupt,t,!1)),!0===t.options.accessibility&&t.$dots.off("keydown.slick",t.keyHandler)),t.$slider.off("focus.slick blur.slick"),!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow&&t.$prevArrow.off("click.slick",t.changeSlide),t.$nextArrow&&t.$nextArrow.off("click.slick",t.changeSlide),!0===t.options.accessibility&&(t.$prevArrow&&t.$prevArrow.off("keydown.slick",t.keyHandler),t.$nextArrow&&t.$nextArrow.off("keydown.slick",t.keyHandler))),t.$list.off("touchstart.slick mousedown.slick",t.swipeHandler),t.$list.off("touchmove.slick mousemove.slick",t.swipeHandler),t.$list.off("touchend.slick mouseup.slick",t.swipeHandler),t.$list.off("touchcancel.slick mouseleave.slick",t.swipeHandler),t.$list.off("click.slick",t.clickHandler),e(document).off(t.visibilityChange,t.visibility),t.cleanUpSlideEvents(),!0===t.options.accessibility&&t.$list.off("keydown.slick",t.keyHandler),!0===t.options.focusOnSelect&&e(t.$slideTrack).children().off("click.slick",t.selectHandler),e(window).off("orientationchange.slick.slick-"+t.instanceUid,t.orientationChange),e(window).off("resize.slick.slick-"+t.instanceUid,t.resize),e("[draggable!=true]",t.$slideTrack).off("dragstart",t.preventDefault),e(window).off("load.slick.slick-"+t.instanceUid,t.setPosition)},r.prototype.cleanUpSlideEvents=function(){var t=this;t.$list.off("mouseenter.slick",e.proxy(t.interrupt,t,!0)),t.$list.off("mouseleave.slick",e.proxy(t.interrupt,t,!1))},r.prototype.cleanUpRows=function(){var e=this,t;0<e.options.rows&&(t=e.$slides.children().children(),t.removeAttr("style"),e.$slider.empty().append(t))},r.prototype.clickHandler=function(e){var t=this;!1===t.shouldClick&&(e.stopImmediatePropagation(),e.stopPropagation(),e.preventDefault())},r.prototype.destroy=function(t){var i=this;i.autoPlayClear(),i.touchObject={},i.cleanUpEvents(),e(".slick-cloned",i.$slider).detach(),i.$dots&&i.$dots.remove(),i.$prevArrow&&i.$prevArrow.length&&(i.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),i.htmlExpr.test(i.options.prevArrow)&&i.$prevArrow.remove()),i.$nextArrow&&i.$nextArrow.length&&(i.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),i.htmlExpr.test(i.options.nextArrow)&&i.$nextArrow.remove()),i.$slides&&(i.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function(){e(this).attr("style",e(this).data("originalStyling"))}),i.$slideTrack.children(this.options.slide).detach(),i.$slideTrack.detach(),i.$list.detach(),i.$slider.append(i.$slides)),i.cleanUpRows(),i.$slider.removeClass("slick-slider"),i.$slider.removeClass("slick-initialized"),i.$slider.removeClass("slick-dotted"),i.unslicked=!0,t||i.$slider.trigger("destroy",[i])},r.prototype.disableTransition=function(e){var t=this,i={};i[t.transitionType]="",!1===t.options.fade?t.$slideTrack.css(i):t.$slides.eq(e).css(i)},r.prototype.fadeSlide=function(e,t){var i=this;!1===i.cssTransitions?(i.$slides.eq(e).css({zIndex:i.options.zIndex}),i.$slides.eq(e).animate({opacity:1},i.options.speed,i.options.easing,t)):(i.applyTransition(e),i.$slides.eq(e).css({opacity:1,zIndex:i.options.zIndex}),t&&setTimeout(function(){i.disableTransition(e),t.call()},i.options.speed))},r.prototype.fadeSlideOut=function(e){var t=this;!1===t.cssTransitions?t.$slides.eq(e).animate({opacity:0,zIndex:t.options.zIndex-2},t.options.speed,t.options.easing):(t.applyTransition(e),t.$slides.eq(e).css({opacity:0,zIndex:t.options.zIndex-2}))},r.prototype.filterSlides=r.prototype.slickFilter=function(e){var t=this;null!==e&&(t.$slidesCache=t.$slides,t.unload(),t.$slideTrack.children(this.options.slide).detach(),t.$slidesCache.filter(e).appendTo(t.$slideTrack),t.reinit())},r.prototype.focusHandler=function(){var t=this;t.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick","*",function(i){i.stopImmediatePropagation();var o=e(this);setTimeout(function(){t.options.pauseOnFocus&&(t.focussed=o.is(":focus"),t.autoPlay())},0)})},r.prototype.getCurrent=r.prototype.slickCurrentSlide=function(){var e=this;return e.currentSlide},r.prototype.getDotCount=function(){var e=this,t=0,i=0,o=0;if(!0===e.options.infinite){if(e.slideCount<=e.options.slidesToShow)++o;else for(;t<e.slideCount;)++o,t=i+e.options.slidesToScroll,i+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;}else if(!0===e.options.centerMode)o=e.slideCount;else if(!e.options.asNavFor)o=1+s((e.slideCount-e.options.slidesToShow)/e.options.slidesToScroll);else for(;t<e.slideCount;)++o,t=i+e.options.slidesToScroll,i+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;return o-1},r.prototype.getLeft=function(e){var t=this,o=0,n,s,a,r;return t.slideOffset=0,s=t.$slides.first().outerHeight(!0),!0===t.options.infinite?(t.slideCount>t.options.slidesToShow&&(t.slideOffset=-1*(t.slideWidth*t.options.slidesToShow),r=-1,!0===t.options.vertical&&!0===t.options.centerMode&&(2===t.options.slidesToShow?r=-1.5:1===t.options.slidesToShow&&(r=-2)),o=s*t.options.slidesToShow*r),0!=t.slideCount%t.options.slidesToScroll&&e+t.options.slidesToScroll>t.slideCount&&t.slideCount>t.options.slidesToShow&&(e>t.slideCount?(t.slideOffset=-1*((t.options.slidesToShow-(e-t.slideCount))*t.slideWidth),o=-1*((t.options.slidesToShow-(e-t.slideCount))*s)):(t.slideOffset=-1*(t.slideCount%t.options.slidesToScroll*t.slideWidth),o=-1*(t.slideCount%t.options.slidesToScroll*s)))):e+t.options.slidesToShow>t.slideCount&&(t.slideOffset=(e+t.options.slidesToShow-t.slideCount)*t.slideWidth,o=(e+t.options.slidesToShow-t.slideCount)*s),t.slideCount<=t.options.slidesToShow&&(t.slideOffset=0,o=0),!0===t.options.centerMode&&t.slideCount<=t.options.slidesToShow?t.slideOffset=t.slideWidth*i(t.options.slidesToShow)/2-t.slideWidth*t.slideCount/2:!0===t.options.centerMode&&!0===t.options.infinite?t.slideOffset+=t.slideWidth*i(t.options.slidesToShow/2)-t.slideWidth:!0===t.options.centerMode&&(t.slideOffset=0,t.slideOffset+=t.slideWidth*i(t.options.slidesToShow/2)),n=!1===t.options.vertical?-1*(e*t.slideWidth)+t.slideOffset:-1*(e*s)+o,!0===t.options.variableWidth&&(a=t.slideCount<=t.options.slidesToShow||!1===t.options.infinite?t.$slideTrack.children(".slick-slide").eq(e):t.$slideTrack.children(".slick-slide").eq(e+t.options.slidesToShow),n=!0===t.options.rtl?a[0]?-1*(t.$slideTrack.width()-a[0].offsetLeft-a.width()):0:a[0]?-1*a[0].offsetLeft:0,!0===t.options.centerMode&&(a=t.slideCount<=t.options.slidesToShow||!1===t.options.infinite?t.$slideTrack.children(".slick-slide").eq(e):t.$slideTrack.children(".slick-slide").eq(e+t.options.slidesToShow+1),n=!0===t.options.rtl?a[0]?-1*(t.$slideTrack.width()-a[0].offsetLeft-a.width()):0:a[0]?-1*a[0].offsetLeft:0,n+=(t.$list.width()-a.outerWidth())/2)),n},r.prototype.getOption=r.prototype.slickGetOption=function(e){var t=this;return t.options[e]},r.prototype.getNavigableIndexes=function(){var e=this,t=0,i=0,o=[],n;for(!1===e.options.infinite?n=e.slideCount:(t=-1*e.options.slidesToScroll,i=-1*e.options.slidesToScroll,n=2*e.slideCount);t<n;)o.push(t),t=i+e.options.slidesToScroll,i+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;return o},r.prototype.getSlick=function(){return this},r.prototype.getSlideCount=function(){var o=this,n,s,a;return a=!0===o.options.centerMode?o.slideWidth*i(o.options.slidesToShow/2):0,!0===o.options.swipeToSlide?(o.$slideTrack.find(".slick-slide").each(function(t,i){if(i.offsetLeft-a+e(i).outerWidth()/2>-1*o.swipeLeft)return s=i,!1}),n=t(e(s).attr("data-slick-index")-o.currentSlide)||1,n):o.options.slidesToScroll},r.prototype.goTo=r.prototype.slickGoTo=function(e,t){var i=this;i.changeSlide({data:{message:"index",index:parseInt(e)}},t)},r.prototype.init=function(t){var i=this;e(i.$slider).hasClass("slick-initialized")||(e(i.$slider).addClass("slick-initialized"),i.buildRows(),i.buildOut(),i.setProps(),i.startLoad(),i.loadSlider(),i.initializeEvents(),i.updateArrows(),i.updateDots(),i.checkResponsive(!0),i.focusHandler()),t&&i.$slider.trigger("init",[i]),!0===i.options.accessibility&&i.initADA(),i.options.autoplay&&(i.paused=!1,i.autoPlay())},r.prototype.initADA=function(){var t=this,o=s(t.slideCount/t.options.slidesToShow),n=t.getNavigableIndexes().filter(function(e){return 0<=e&&e<t.slideCount});t.$slides.add(t.$slideTrack.find(".slick-cloned")).attr({"aria-hidden":"true",tabindex:"-1"}).find("a, input, button, select").attr({tabindex:"-1"}),null!==t.$dots&&(t.$slides.not(t.$slideTrack.find(".slick-cloned")).each(function(o){var i=n.indexOf(o);if(e(this).attr({role:"tabpanel",id:"slick-slide"+t.instanceUid+o,tabindex:-1}),-1!==i){var s="slick-slide-control"+t.instanceUid+i;e("#"+s).length&&e(this).attr({"aria-describedby":s})}}),t.$dots.attr("role","tablist").find("li").each(function(s){var i=n[s];e(this).attr({role:"presentation"}),e(this).find("button").first().attr({role:"tab",id:"slick-slide-control"+t.instanceUid+s,"aria-controls":"slick-slide"+t.instanceUid+i,"aria-label":s+1+" of "+o,"aria-selected":null,tabindex:"-1"})}).eq(t.currentSlide).find("button").attr({"aria-selected":"true",tabindex:"0"}).end());for(var a=t.currentSlide,r=a+t.options.slidesToShow;a<r;a++)t.options.focusOnChange?t.$slides.eq(a).attr({tabindex:"0"}):t.$slides.eq(a).removeAttr("tabindex");t.activateADA()},r.prototype.initArrowEvents=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.off("click.slick").on("click.slick",{message:"previous"},e.changeSlide),e.$nextArrow.off("click.slick").on("click.slick",{message:"next"},e.changeSlide),!0===e.options.accessibility&&(e.$prevArrow.on("keydown.slick",e.keyHandler),e.$nextArrow.on("keydown.slick",e.keyHandler)))},r.prototype.initDotEvents=function(){var t=this;!0===t.options.dots&&t.slideCount>t.options.slidesToShow&&(e("li",t.$dots).on("click.slick",{message:"index"},t.changeSlide),!0===t.options.accessibility&&t.$dots.on("keydown.slick",t.keyHandler)),!0===t.options.dots&&!0===t.options.pauseOnDotsHover&&t.slideCount>t.options.slidesToShow&&e("li",t.$dots).on("mouseenter.slick",e.proxy(t.interrupt,t,!0)).on("mouseleave.slick",e.proxy(t.interrupt,t,!1))},r.prototype.initSlideEvents=function(){var t=this;t.options.pauseOnHover&&(t.$list.on("mouseenter.slick",e.proxy(t.interrupt,t,!0)),t.$list.on("mouseleave.slick",e.proxy(t.interrupt,t,!1)))},r.prototype.initializeEvents=function(){var t=this;t.initArrowEvents(),t.initDotEvents(),t.initSlideEvents(),t.$list.on("touchstart.slick mousedown.slick",{action:"start"},t.swipeHandler),t.$list.on("touchmove.slick mousemove.slick",{action:"move"},t.swipeHandler),t.$list.on("touchend.slick mouseup.slick",{action:"end"},t.swipeHandler),t.$list.on("touchcancel.slick mouseleave.slick",{action:"end"},t.swipeHandler),t.$list.on("click.slick",t.clickHandler),e(document).on(t.visibilityChange,e.proxy(t.visibility,t)),!0===t.options.accessibility&&t.$list.on("keydown.slick",t.keyHandler),!0===t.options.focusOnSelect&&e(t.$slideTrack).children().on("click.slick",t.selectHandler),e(window).on("orientationchange.slick.slick-"+t.instanceUid,e.proxy(t.orientationChange,t)),e(window).on("resize.slick.slick-"+t.instanceUid,e.proxy(t.resize,t)),e("[draggable!=true]",t.$slideTrack).on("dragstart",t.preventDefault),e(window).on("load.slick.slick-"+t.instanceUid,t.setPosition),e(t.setPosition)},r.prototype.initUI=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.show(),e.$nextArrow.show()),!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&e.$dots.show()},r.prototype.keyHandler=function(e){var t=this;e.target.tagName.match("TEXTAREA|INPUT|SELECT")||(37===e.keyCode&&!0===t.options.accessibility?t.changeSlide({data:{message:!0===t.options.rtl?"next":"previous"}}):39===e.keyCode&&!0===t.options.accessibility&&t.changeSlide({data:{message:!0===t.options.rtl?"previous":"next"}}))},r.prototype.lazyLoad=function(){function t(t){e("img[data-lazy]",t).each(function(){var t=e(this),i=e(this).attr("data-lazy"),n=e(this).attr("data-srcset"),s=e(this).attr("data-sizes")||o.$slider.attr("data-sizes"),a=document.createElement("img");a.onload=function(){t.animate({opacity:0},100,function(){n&&(t.attr("srcset",n),s&&t.attr("sizes",s)),t.attr("src",i).animate({opacity:1},200,function(){t.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading")}),o.$slider.trigger("lazyLoaded",[o,t,i])})},a.onerror=function(){t.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),o.$slider.trigger("lazyLoadError",[o,t,i])},a.src=i})}var o=this,n,r,d,l;if(!0===o.options.centerMode?!0===o.options.infinite?(d=o.currentSlide+(o.options.slidesToShow/2+1),l=d+o.options.slidesToShow+2):(d=a(0,o.currentSlide-(o.options.slidesToShow/2+1)),l=2+(o.options.slidesToShow/2+1)+o.currentSlide):(d=o.options.infinite?o.options.slidesToShow+o.currentSlide:o.currentSlide,l=s(d+o.options.slidesToShow),!0===o.options.fade&&(0<d&&d--,l<=o.slideCount&&l++)),n=o.$slider.find(".slick-slide").slice(d,l),"anticipated"===o.options.lazyLoad)for(var p=d-1,c=l,u=o.$slider.find(".slick-slide"),h=0;h<o.options.slidesToScroll;h++)0>p&&(p=o.slideCount-1),n=n.add(u.eq(p)),n=n.add(u.eq(c)),p--,c++;t(n),o.slideCount<=o.options.slidesToShow?(r=o.$slider.find(".slick-slide"),t(r)):o.currentSlide>=o.slideCount-o.options.slidesToShow?(r=o.$slider.find(".slick-cloned").slice(0,o.options.slidesToShow),t(r)):0===o.currentSlide&&(r=o.$slider.find(".slick-cloned").slice(-1*o.options.slidesToShow),t(r))},r.prototype.loadSlider=function(){var e=this;e.setPosition(),e.$slideTrack.css({opacity:1}),e.$slider.removeClass("slick-loading"),e.initUI(),"progressive"===e.options.lazyLoad&&e.progressiveLazyLoad()},r.prototype.next=r.prototype.slickNext=function(){var e=this;e.changeSlide({data:{message:"next"}})},r.prototype.orientationChange=function(){var e=this;e.checkResponsive(),e.setPosition()},r.prototype.pause=r.prototype.slickPause=function(){var e=this;e.autoPlayClear(),e.paused=!0},r.prototype.play=r.prototype.slickPlay=function(){var e=this;e.autoPlay(),e.options.autoplay=!0,e.paused=!1,e.focussed=!1,e.interrupted=!1},r.prototype.postSlide=function(t){var i=this;if(!i.unslicked&&(i.$slider.trigger("afterChange",[i,t]),i.animating=!1,i.slideCount>i.options.slidesToShow&&i.setPosition(),i.swipeLeft=null,i.options.autoplay&&i.autoPlay(),!0===i.options.accessibility&&(i.initADA(),i.options.focusOnChange))){var o=e(i.$slides.get(i.currentSlide));o.attr("tabindex",0).focus()}},r.prototype.prev=r.prototype.slickPrev=function(){var e=this;e.changeSlide({data:{message:"previous"}})},r.prototype.preventDefault=function(e){e.preventDefault()},r.prototype.progressiveLazyLoad=function(t){t=t||1;var i=this,o=e("img[data-lazy]",i.$slider),n,s,a,r,d;o.length?(n=o.first(),s=n.attr("data-lazy"),a=n.attr("data-srcset"),r=n.attr("data-sizes")||i.$slider.attr("data-sizes"),d=document.createElement("img"),d.onload=function(){a&&(n.attr("srcset",a),r&&n.attr("sizes",r)),n.attr("src",s).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading"),!0===i.options.adaptiveHeight&&i.setPosition(),i.$slider.trigger("lazyLoaded",[i,n,s]),i.progressiveLazyLoad()},d.onerror=function(){3>t?setTimeout(function(){i.progressiveLazyLoad(t+1)},500):(n.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),i.$slider.trigger("lazyLoadError",[i,n,s]),i.progressiveLazyLoad())},d.src=s):i.$slider.trigger("allImagesLoaded",[i])},r.prototype.refresh=function(t){var i=this,o,n;n=i.slideCount-i.options.slidesToShow,!i.options.infinite&&i.currentSlide>n&&(i.currentSlide=n),i.slideCount<=i.options.slidesToShow&&(i.currentSlide=0),o=i.currentSlide,i.destroy(!0),e.extend(i,i.initials,{currentSlide:o}),i.init(),t||i.changeSlide({data:{message:"index",index:o}},!1)},r.prototype.registerBreakpoints=function(){var t=this,i=t.options.responsive||null,o,n,s;if("array"===e.type(i)&&i.length){for(o in t.respondTo=t.options.respondTo||"window",i)if(s=t.breakpoints.length-1,i.hasOwnProperty(o)){for(n=i[o].breakpoint;0<=s;)t.breakpoints[s]&&t.breakpoints[s]===n&&t.breakpoints.splice(s,1),s--;t.breakpoints.push(n),t.breakpointSettings[n]=i[o].settings}t.breakpoints.sort(function(e,i){return t.options.mobileFirst?e-i:i-e})}},r.prototype.reinit=function(){var t=this;t.$slides=t.$slideTrack.children(t.options.slide).addClass("slick-slide"),t.slideCount=t.$slides.length,t.currentSlide>=t.slideCount&&0!==t.currentSlide&&(t.currentSlide-=t.options.slidesToScroll),t.slideCount<=t.options.slidesToShow&&(t.currentSlide=0),t.registerBreakpoints(),t.setProps(),t.setupInfinite(),t.buildArrows(),t.updateArrows(),t.initArrowEvents(),t.buildDots(),t.updateDots(),t.initDotEvents(),t.cleanUpSlideEvents(),t.initSlideEvents(),t.checkResponsive(!1,!0),!0===t.options.focusOnSelect&&e(t.$slideTrack).children().on("click.slick",t.selectHandler),t.setSlideClasses("number"==typeof t.currentSlide?t.currentSlide:0),t.setPosition(),t.focusHandler(),t.paused=!t.options.autoplay,t.autoPlay(),t.$slider.trigger("reInit",[t])},r.prototype.resize=function(){var t=this;e(window).width()!==t.windowWidth&&(clearTimeout(t.windowDelay),t.windowDelay=window.setTimeout(function(){t.windowWidth=e(window).width(),t.checkResponsive(),t.unslicked||t.setPosition()},50))},r.prototype.removeSlide=r.prototype.slickRemove=function(e,t,i){var o=this;return"boolean"==typeof e?(t=e,e=!0===t?0:o.slideCount-1):e=!0===t?--e:e,!(1>o.slideCount||0>e||e>o.slideCount-1)&&void(o.unload(),!0===i?o.$slideTrack.children().remove():o.$slideTrack.children(this.options.slide).eq(e).remove(),o.$slides=o.$slideTrack.children(this.options.slide),o.$slideTrack.children(this.options.slide).detach(),o.$slideTrack.append(o.$slides),o.$slidesCache=o.$slides,o.reinit())},r.prototype.setCSS=function(e){var t=this,i={},o,n;!0===t.options.rtl&&(e=-e),o="left"==t.positionProp?s(e)+"px":"0px",n="top"==t.positionProp?s(e)+"px":"0px",i[t.positionProp]=e,!1===t.transformsEnabled?t.$slideTrack.css(i):(i={},!1===t.cssTransitions?(i[t.animType]="translate("+o+", "+n+")",t.$slideTrack.css(i)):(i[t.animType]="translate3d("+o+", "+n+", 0px)",t.$slideTrack.css(i)))},r.prototype.setDimensions=function(){var e=this;!1===e.options.vertical?!0===e.options.centerMode&&e.$list.css({padding:"0px "+e.options.centerPadding}):(e.$list.height(e.$slides.first().outerHeight(!0)*e.options.slidesToShow),!0===e.options.centerMode&&e.$list.css({padding:e.options.centerPadding+" 0px"})),e.listWidth=e.$list.width(),e.listHeight=e.$list.height(),!1===e.options.vertical&&!1===e.options.variableWidth?(e.slideWidth=s(e.listWidth/e.options.slidesToShow),e.$slideTrack.width(s(e.slideWidth*e.$slideTrack.children(".slick-slide").length))):!0===e.options.variableWidth?e.$slideTrack.width(5e3*e.slideCount):(e.slideWidth=s(e.listWidth),e.$slideTrack.height(s(e.$slides.first().outerHeight(!0)*e.$slideTrack.children(".slick-slide").length)));var t=e.$slides.first().outerWidth(!0)-e.$slides.first().width();!1===e.options.variableWidth&&e.$slideTrack.children(".slick-slide").width(e.slideWidth-t)},r.prototype.setFade=function(){var t=this,i;t.$slides.each(function(o,n){i=-1*(t.slideWidth*o),!0===t.options.rtl?e(n).css({position:"relative",right:i,top:0,zIndex:t.options.zIndex-2,opacity:0}):e(n).css({position:"relative",left:i,top:0,zIndex:t.options.zIndex-2,opacity:0})}),t.$slides.eq(t.currentSlide).css({zIndex:t.options.zIndex-1,opacity:1})},r.prototype.setHeight=function(){var e=this;if(1===e.options.slidesToShow&&!0===e.options.adaptiveHeight&&!1===e.options.vertical){var t=e.$slides.eq(e.currentSlide).outerHeight(!0);e.$list.css("height",t)}},r.prototype.setOption=r.prototype.slickSetOption=function(){var t=this,i=!1,o,n,s,a,r;if("object"===e.type(arguments[0])?(s=arguments[0],i=arguments[1],r="multiple"):"string"===e.type(arguments[0])&&(s=arguments[0],a=arguments[1],i=arguments[2],"responsive"===arguments[0]&&"array"===e.type(arguments[1])?r="responsive":"undefined"!=typeof arguments[1]&&(r="single")),"single"===r)t.options[s]=a;else if("multiple"===r)e.each(s,function(e,i){t.options[e]=i});else if("responsive"===r)for(n in a)if("array"!==e.type(t.options.responsive))t.options.responsive=[a[n]];else{for(o=t.options.responsive.length-1;0<=o;)t.options.responsive[o].breakpoint===a[n].breakpoint&&t.options.responsive.splice(o,1),o--;t.options.responsive.push(a[n])}i&&(t.unload(),t.reinit())},r.prototype.setPosition=function(){var e=this;e.setDimensions(),e.setHeight(),!1===e.options.fade?e.setCSS(e.getLeft(e.currentSlide)):e.setFade(),e.$slider.trigger("setPosition",[e])},r.prototype.setProps=function(){var e=this,t=document.body.style;e.positionProp=!0===e.options.vertical?"top":"left","top"===e.positionProp?e.$slider.addClass("slick-vertical"):e.$slider.removeClass("slick-vertical"),(t.WebkitTransition!==void 0||t.MozTransition!==void 0||t.msTransition!==void 0)&&!0===e.options.useCSS&&(e.cssTransitions=!0),e.options.fade&&("number"==typeof e.options.zIndex?3>e.options.zIndex&&(e.options.zIndex=3):e.options.zIndex=e.defaults.zIndex),t.OTransform!==void 0&&(e.animType="OTransform",e.transformType="-o-transform",e.transitionType="OTransition",t.perspectiveProperty===void 0&&t.webkitPerspective===void 0&&(e.animType=!1)),t.MozTransform!==void 0&&(e.animType="MozTransform",e.transformType="-moz-transform",e.transitionType="MozTransition",t.perspectiveProperty===void 0&&t.MozPerspective===void 0&&(e.animType=!1)),t.webkitTransform!==void 0&&(e.animType="webkitTransform",e.transformType="-webkit-transform",e.transitionType="webkitTransition",t.perspectiveProperty===void 0&&t.webkitPerspective===void 0&&(e.animType=!1)),t.msTransform!==void 0&&(e.animType="msTransform",e.transformType="-ms-transform",e.transitionType="msTransition",t.msTransform===void 0&&(e.animType=!1)),t.transform!==void 0&&!1!==e.animType&&(e.animType="transform",e.transformType="transform",e.transitionType="transition"),e.transformsEnabled=e.options.useTransform&&null!==e.animType&&!1!==e.animType},r.prototype.setSlideClasses=function(e){var t=this,o,n,s,a;if(n=t.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden","true"),t.$slides.eq(e).addClass("slick-current"),!0===t.options.centerMode){var r=0==t.options.slidesToShow%2?1:0;o=i(t.options.slidesToShow/2),!0===t.options.infinite&&(e>=o&&e<=t.slideCount-1-o?t.$slides.slice(e-o+r,e+o+1).addClass("slick-active").attr("aria-hidden","false"):(s=t.options.slidesToShow+e,n.slice(s-o+1+r,s+o+2).addClass("slick-active").attr("aria-hidden","false")),0===e?n.eq(n.length-1-t.options.slidesToShow).addClass("slick-center"):e==t.slideCount-1&&n.eq(t.options.slidesToShow).addClass("slick-center")),t.$slides.eq(e).addClass("slick-center")}else 0<=e&&e<=t.slideCount-t.options.slidesToShow?t.$slides.slice(e,e+t.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"):n.length<=t.options.slidesToShow?n.addClass("slick-active").attr("aria-hidden","false"):(a=t.slideCount%t.options.slidesToShow,s=!0===t.options.infinite?t.options.slidesToShow+e:e,t.options.slidesToShow==t.options.slidesToScroll&&t.slideCount-e<t.options.slidesToShow?n.slice(s-(t.options.slidesToShow-a),s+a).addClass("slick-active").attr("aria-hidden","false"):n.slice(s,s+t.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"));("ondemand"===t.options.lazyLoad||"anticipated"===t.options.lazyLoad)&&t.lazyLoad()},r.prototype.setupInfinite=function(){var t=this,o,n,s;if(!0===t.options.fade&&(t.options.centerMode=!1),!0===t.options.infinite&&!1===t.options.fade&&(n=null,t.slideCount>t.options.slidesToShow)){for(s=!0===t.options.centerMode?t.options.slidesToShow+1:t.options.slidesToShow,o=t.slideCount;o>t.slideCount-s;o-=1)n=o-1,e(t.$slides[n]).clone(!0).attr("id","").attr("data-slick-index",n-t.slideCount).prependTo(t.$slideTrack).addClass("slick-cloned");for(o=0;o<s+t.slideCount;o+=1)n=o,e(t.$slides[n]).clone(!0).attr("id","").attr("data-slick-index",n+t.slideCount).appendTo(t.$slideTrack).addClass("slick-cloned");t.$slideTrack.find(".slick-cloned").find("[id]").each(function(){e(this).attr("id","")})}},r.prototype.interrupt=function(e){var t=this;e||t.autoPlay(),t.interrupted=e},r.prototype.selectHandler=function(t){var i=this,o=e(t.target).is(".slick-slide")?e(t.target):e(t.target).parents(".slick-slide"),n=parseInt(o.attr("data-slick-index"));return n||(n=0),i.slideCount<=i.options.slidesToShow?void i.slideHandler(n,!1,!0):void i.slideHandler(n)},r.prototype.slideHandler=function(e,t,i){var o=null,n=this,s,a,r,d,l;if(t=t||!1,!0!==n.animating||!0!==n.options.waitForAnimate)return!0!==n.options.fade||n.currentSlide!==e?(!1===t&&n.asNavFor(e),s=e,o=n.getLeft(s),d=n.getLeft(n.currentSlide),n.currentLeft=null===n.swipeLeft?d:n.swipeLeft,!1===n.options.infinite&&!1===n.options.centerMode&&(0>e||e>n.getDotCount()*n.options.slidesToScroll))?void(!1===n.options.fade&&(s=n.currentSlide,!0!==i&&n.slideCount>n.options.slidesToShow?n.animateSlide(d,function(){n.postSlide(s)}):n.postSlide(s))):!1===n.options.infinite&&!0===n.options.centerMode&&(0>e||e>n.slideCount-n.options.slidesToScroll)?void(!1===n.options.fade&&(s=n.currentSlide,!0!==i&&n.slideCount>n.options.slidesToShow?n.animateSlide(d,function(){n.postSlide(s)}):n.postSlide(s))):(n.options.autoplay&&clearInterval(n.autoPlayTimer),a=0>s?0==n.slideCount%n.options.slidesToScroll?n.slideCount+s:n.slideCount-n.slideCount%n.options.slidesToScroll:s>=n.slideCount?0==n.slideCount%n.options.slidesToScroll?s-n.slideCount:0:s,n.animating=!0,n.$slider.trigger("beforeChange",[n,n.currentSlide,a]),r=n.currentSlide,n.currentSlide=a,n.setSlideClasses(n.currentSlide),n.options.asNavFor&&(l=n.getNavTarget(),l=l.slick("getSlick"),l.slideCount<=l.options.slidesToShow&&l.setSlideClasses(n.currentSlide)),n.updateDots(),n.updateArrows(),!0===n.options.fade?(!0===i?n.postSlide(a):(n.fadeSlideOut(r),n.fadeSlide(a,function(){n.postSlide(a)})),void n.animateHeight()):void(!0!==i&&n.slideCount>n.options.slidesToShow?n.animateSlide(o,function(){n.postSlide(a)}):n.postSlide(a))):void 0},r.prototype.startLoad=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.hide(),e.$nextArrow.hide()),!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&e.$dots.hide(),e.$slider.addClass("slick-loading")},r.prototype.swipeDirection=function(){var e=Math.atan2,i=this,s,a,d,l;return s=i.touchObject.startX-i.touchObject.curX,a=i.touchObject.startY-i.touchObject.curY,d=e(a,s),l=n(180*d/o),0>l&&(l=360-t(l)),45>=l&&0<=l?!1===i.options.rtl?"left":"right":360>=l&&315<=l?!1===i.options.rtl?"left":"right":135<=l&&225>=l?!1===i.options.rtl?"right":"left":!0===i.options.verticalSwiping?35<=l&&135>=l?"down":"up":"vertical"},r.prototype.swipeEnd=function(){var e=this,t,i;if(e.dragging=!1,e.swiping=!1,e.scrolling)return e.scrolling=!1,!1;if(e.interrupted=!1,e.shouldClick=!(10<e.touchObject.swipeLength),void 0===e.touchObject.curX)return!1;if(!0===e.touchObject.edgeHit&&e.$slider.trigger("edge",[e,e.swipeDirection()]),e.touchObject.swipeLength>=e.touchObject.minSwipe){switch(i=e.swipeDirection(),i){case"left":case"down":t=e.options.swipeToSlide?e.checkNavigable(e.currentSlide+e.getSlideCount()):e.currentSlide+e.getSlideCount(),e.currentDirection=0;break;case"right":case"up":t=e.options.swipeToSlide?e.checkNavigable(e.currentSlide-e.getSlideCount()):e.currentSlide-e.getSlideCount(),e.currentDirection=1;break;default:}"vertical"!=i&&(e.slideHandler(t),e.touchObject={},e.$slider.trigger("swipe",[e,i]))}else e.touchObject.startX!==e.touchObject.curX&&(e.slideHandler(e.currentSlide),e.touchObject={})},r.prototype.swipeHandler=function(e){var t=this;if(!(!1===t.options.swipe||"ontouchend"in document&&!1===t.options.swipe)&&(!1!==t.options.draggable||-1===e.type.indexOf("mouse")))switch(t.touchObject.fingerCount=e.originalEvent&&void 0!==e.originalEvent.touches?e.originalEvent.touches.length:1,t.touchObject.minSwipe=t.listWidth/t.options.touchThreshold,!0===t.options.verticalSwiping&&(t.touchObject.minSwipe=t.listHeight/t.options.touchThreshold),e.data.action){case"start":t.swipeStart(e);break;case"move":t.swipeMove(e);break;case"end":t.swipeEnd(e);}},r.prototype.swipeMove=function(e){var t=Math.sqrt,i=Math.pow,o=this,s,a,r,d,l,p;return(l=void 0===e.originalEvent?null:e.originalEvent.touches,!(!o.dragging||o.scrolling||l&&1!==l.length))&&((s=o.getLeft(o.currentSlide),o.touchObject.curX=void 0===l?e.clientX:l[0].pageX,o.touchObject.curY=void 0===l?e.clientY:l[0].pageY,o.touchObject.swipeLength=n(t(i(o.touchObject.curX-o.touchObject.startX,2))),p=n(t(i(o.touchObject.curY-o.touchObject.startY,2))),!o.options.verticalSwiping&&!o.swiping&&4<p)?(o.scrolling=!0,!1):(!0===o.options.verticalSwiping&&(o.touchObject.swipeLength=p),a=o.swipeDirection(),void 0!==e.originalEvent&&4<o.touchObject.swipeLength&&(o.swiping=!0,e.preventDefault()),d=(!1===o.options.rtl?1:-1)*(o.touchObject.curX>o.touchObject.startX?1:-1),!0===o.options.verticalSwiping&&(d=o.touchObject.curY>o.touchObject.startY?1:-1),r=o.touchObject.swipeLength,o.touchObject.edgeHit=!1,!1===o.options.infinite&&(0===o.currentSlide&&"right"===a||o.currentSlide>=o.getDotCount()&&"left"===a)&&(r=o.touchObject.swipeLength*o.options.edgeFriction,o.touchObject.edgeHit=!0),o.swipeLeft=!1===o.options.vertical?s+r*d:s+r*(o.$list.height()/o.listWidth)*d,!0===o.options.verticalSwiping&&(o.swipeLeft=s+r*d),!0!==o.options.fade&&!1!==o.options.touchMove&&(!0===o.animating?(o.swipeLeft=null,!1):void o.setCSS(o.swipeLeft))))},r.prototype.swipeStart=function(e){var t=this,i;return t.interrupted=!0,1!==t.touchObject.fingerCount||t.slideCount<=t.options.slidesToShow?(t.touchObject={},!1):void(void 0!==e.originalEvent&&void 0!==e.originalEvent.touches&&(i=e.originalEvent.touches[0]),t.touchObject.startX=t.touchObject.curX=void 0===i?e.clientX:i.pageX,t.touchObject.startY=t.touchObject.curY=void 0===i?e.clientY:i.pageY,t.dragging=!0)},r.prototype.unfilterSlides=r.prototype.slickUnfilter=function(){var e=this;null!==e.$slidesCache&&(e.unload(),e.$slideTrack.children(this.options.slide).detach(),e.$slidesCache.appendTo(e.$slideTrack),e.reinit())},r.prototype.unload=function(){var t=this;e(".slick-cloned",t.$slider).remove(),t.$dots&&t.$dots.remove(),t.$prevArrow&&t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.remove(),t.$nextArrow&&t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.remove(),t.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden","true").css("width","")},r.prototype.unslick=function(e){var t=this;t.$slider.trigger("unslick",[t,e]),t.destroy()},r.prototype.updateArrows=function(){var e=this,t;t=i(e.options.slidesToShow/2),!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&!e.options.infinite&&(e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false"),e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false"),0===e.currentSlide?(e.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false")):e.currentSlide>=e.slideCount-e.options.slidesToShow&&!1===e.options.centerMode?(e.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")):e.currentSlide>=e.slideCount-1&&!0===e.options.centerMode&&(e.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")))},r.prototype.updateDots=function(){var e=this;null!==e.$dots&&(e.$dots.find("li").removeClass("slick-active").end(),e.$dots.find("li").eq(i(e.currentSlide/e.options.slidesToScroll)).addClass("slick-active"))},r.prototype.visibility=function(){var e=this;e.options.autoplay&&(document[e.hidden]?e.interrupted=!0:e.interrupted=!1)},e.fn.slick=function(){var e=this,t=arguments[0],o=Array.prototype.slice.call(arguments,1),n=e.length,s,a;for(s=0;s<n;s++)if("object"==typeof t||"undefined"==typeof t?e[s].slick=new r(e[s],t):a=e[s].slick[t].apply(e[s].slick,o),"undefined"!=typeof a)return a;return e}})},{jquery:2}]},{},[1]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
